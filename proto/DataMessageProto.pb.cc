// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataMessageProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataMessageProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace platoon {
namespace communication {
class DriveUnitOperationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveUnitOperation> {
} _DriveUnitOperation_default_instance_;
class PathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Path> {
} _Path_default_instance_;
class DriveUnitOperationResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveUnitOperationResult> {
} _DriveUnitOperationResult_default_instance_;
class DspFeedbackFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DspFeedbackFrame> {
} _DspFeedbackFrame_default_instance_;
class RequireLaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequireLane> {
} _RequireLane_default_instance_;
class RequireLaneResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequireLaneResult> {
} _RequireLaneResult_default_instance_;
class VehicleInOutPortMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleInOutPortMsg> {
} _VehicleInOutPortMsg_default_instance_;
class OperationReceivedMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperationReceivedMsg> {
} _OperationReceivedMsg_default_instance_;
class Fleet_nodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Fleet_node> {
} _Fleet_node_default_instance_;
class VehicleFleetOperationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleFleetOperation> {
} _VehicleFleetOperation_default_instance_;
class VehicleFleetResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleFleetResult> {
} _VehicleFleetResult_default_instance_;
class VehicleFleetInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleFleetInfo> {
} _VehicleFleetInfo_default_instance_;

namespace protobuf_DataMessageProto_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DriveUnitOperation_default_instance_.Shutdown();
  _Path_default_instance_.Shutdown();
  _DriveUnitOperationResult_default_instance_.Shutdown();
  _DspFeedbackFrame_default_instance_.Shutdown();
  _RequireLane_default_instance_.Shutdown();
  _RequireLaneResult_default_instance_.Shutdown();
  _VehicleInOutPortMsg_default_instance_.Shutdown();
  _OperationReceivedMsg_default_instance_.Shutdown();
  _Fleet_node_default_instance_.Shutdown();
  _VehicleFleetOperation_default_instance_.Shutdown();
  _VehicleFleetResult_default_instance_.Shutdown();
  _VehicleFleetInfo_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _DriveUnitOperation_default_instance_.DefaultConstruct();
  _Path_default_instance_.DefaultConstruct();
  _DriveUnitOperationResult_default_instance_.DefaultConstruct();
  _DspFeedbackFrame_default_instance_.DefaultConstruct();
  _RequireLane_default_instance_.DefaultConstruct();
  _RequireLaneResult_default_instance_.DefaultConstruct();
  _VehicleInOutPortMsg_default_instance_.DefaultConstruct();
  _OperationReceivedMsg_default_instance_.DefaultConstruct();
  _Fleet_node_default_instance_.DefaultConstruct();
  _VehicleFleetOperation_default_instance_.DefaultConstruct();
  _VehicleFleetResult_default_instance_.DefaultConstruct();
  _VehicleFleetInfo_default_instance_.DefaultConstruct();
  _DspFeedbackFrame_default_instance_.get_mutable()->curtime_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _VehicleFleetOperation_default_instance_.get_mutable()->starttime_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _VehicleFleetOperation_default_instance_.get_mutable()->startnode_ = const_cast< ::platoon::communication::Fleet_node*>(
      ::platoon::communication::Fleet_node::internal_default_instance());
  _VehicleFleetOperation_default_instance_.get_mutable()->endnode_ = const_cast< ::platoon::communication::Fleet_node*>(
      ::platoon::communication::Fleet_node::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_DataMessageProto_2eproto

bool DriveUnitOperationResult_TASK_PerfResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult::StatusUnavaliable;
const DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult::Incompleted;
const DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult::Completed;
const DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult::Reserved_1_Result;
const DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult::Reserved_2_Result;
const DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult::TASK_PerfResult_MIN;
const DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult::TASK_PerfResult_MAX;
const int DriveUnitOperationResult::TASK_PerfResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool VehicleInOutPortMsg_AcrossPort_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::PortUnavaliable;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::Leave_Port;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::Approaching_Port;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::Enter_Port;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::Leave_Port_Success;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::Leave_Port_Fail;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::Enter_Port_Sucess;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::Enter_Port_Fail;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::AcrossPort_type_MIN;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::AcrossPort_type_MAX;
const int VehicleInOutPortMsg::AcrossPort_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Fleet_node_NodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Fleet_node_NodeType Fleet_node::NODE_INVAILD;
const Fleet_node_NodeType Fleet_node::NODE_GROUPING;
const Fleet_node_NodeType Fleet_node::NODE_LEAVING;
const Fleet_node_NodeType Fleet_node::NodeType_MIN;
const Fleet_node_NodeType Fleet_node::NodeType_MAX;
const int Fleet_node::NodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool VehicleFleetInfo_VehicleFleetMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::MAN_DRIVE;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::AUTO_DRIVE;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::FLEET_HEADER;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::FLEET_GROUPING;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::FLEET_KEEP;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::FLEET_LEAVING;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::MODE_ERROR;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::INVILIED;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::HEADER_WAITING;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::CUT_IN;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::VehicleFleetMode_MIN;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::VehicleFleetMode_MAX;
const int VehicleFleetInfo::VehicleFleetMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FMS_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 101:
    case 201:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 401:
      return true;
    default:
      return false;
  }
}

bool ContainerLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool OperationCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

bool WorkingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool ContainerForm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool ContainerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool PathType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

bool VehicleStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool Port_Id_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool FleetApplyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveUnitOperation::kIdFieldNumber;
const int DriveUnitOperation::kVehicleIdFieldNumber;
const int DriveUnitOperation::kTaskIdFieldNumber;
const int DriveUnitOperation::kActionIdFieldNumber;
const int DriveUnitOperation::kOperationCodeFieldNumber;
const int DriveUnitOperation::kWorkingModeFieldNumber;
const int DriveUnitOperation::kTimeLimitFieldNumber;
const int DriveUnitOperation::kContainerWeightFieldNumber;
const int DriveUnitOperation::kContainerFormFieldNumber;
const int DriveUnitOperation::kContainerTypeFieldNumber;
const int DriveUnitOperation::kContainerLocationFieldNumber;
const int DriveUnitOperation::kNextPathFieldNumber;
const int DriveUnitOperation::kInchingDistanceFieldNumber;
const int DriveUnitOperation::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveUnitOperation::DriveUnitOperation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.DriveUnitOperation)
}
DriveUnitOperation::DriveUnitOperation(const DriveUnitOperation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      nextpath_(from.nextpath_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicleid().size() > 0) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&taskid_, &from.taskid_,
    reinterpret_cast<char*>(&inchingdistance_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(inchingdistance_));
  // @@protoc_insertion_point(copy_constructor:platoon.communication.DriveUnitOperation)
}

void DriveUnitOperation::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&inchingdistance_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(inchingdistance_));
  _cached_size_ = 0;
}

DriveUnitOperation::~DriveUnitOperation() {
  // @@protoc_insertion_point(destructor:platoon.communication.DriveUnitOperation)
  SharedDtor();
}

void DriveUnitOperation::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriveUnitOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveUnitOperation& DriveUnitOperation::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveUnitOperation* DriveUnitOperation::New(::google::protobuf::Arena* arena) const {
  DriveUnitOperation* n = new DriveUnitOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveUnitOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.DriveUnitOperation)
  nextpath_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&inchingdistance_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(inchingdistance_));
}

bool DriveUnitOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.DriveUnitOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DriveUnitOperation.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicleId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicleid().data(), this->vehicleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DriveUnitOperation.vehicleId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 taskId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actionId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.OperationCode operationCode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operationcode(static_cast< ::platoon::communication::OperationCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.WorkingMode workingMode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_workingmode(static_cast< ::platoon::communication::WorkingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timeLimit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timelimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float containerWeight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &containerweight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.ContainerForm containerForm = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_containerform(static_cast< ::platoon::communication::ContainerForm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.ContainerType containerType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_containertype(static_cast< ::platoon::communication::ContainerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.ContainerLocation containerLocation = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_containerlocation(static_cast< ::platoon::communication::ContainerLocation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .platoon.communication.Path nextPath = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nextpath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 inchingDistance = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inchingdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DriveUnitOperation.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.DriveUnitOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.DriveUnitOperation)
  return false;
#undef DO_
}

void DriveUnitOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.DriveUnitOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DriveUnitOperation.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicleid().data(), this->vehicleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DriveUnitOperation.vehicleId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicleid(), output);
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->taskid(), output);
  }

  // int32 actionId = 4;
  if (this->actionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actionid(), output);
  }

  // .platoon.communication.OperationCode operationCode = 5;
  if (this->operationcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->operationcode(), output);
  }

  // .platoon.communication.WorkingMode workingMode = 6;
  if (this->workingmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->workingmode(), output);
  }

  // int32 timeLimit = 7;
  if (this->timelimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timelimit(), output);
  }

  // float containerWeight = 8;
  if (this->containerweight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->containerweight(), output);
  }

  // .platoon.communication.ContainerForm containerForm = 9;
  if (this->containerform() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->containerform(), output);
  }

  // .platoon.communication.ContainerType containerType = 10;
  if (this->containertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->containertype(), output);
  }

  // .platoon.communication.ContainerLocation containerLocation = 11;
  if (this->containerlocation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->containerlocation(), output);
  }

  // repeated .platoon.communication.Path nextPath = 12;
  for (unsigned int i = 0, n = this->nextpath_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->nextpath(i), output);
  }

  // int32 inchingDistance = 13;
  if (this->inchingdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->inchingdistance(), output);
  }

  // string signature = 14;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DriveUnitOperation.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.DriveUnitOperation)
}

size_t DriveUnitOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.DriveUnitOperation)
  size_t total_size = 0;

  // repeated .platoon.communication.Path nextPath = 12;
  {
    unsigned int count = this->nextpath_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nextpath(i));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleid());
  }

  // string signature = 14;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  // int32 actionId = 4;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionid());
  }

  // .platoon.communication.OperationCode operationCode = 5;
  if (this->operationcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operationcode());
  }

  // .platoon.communication.WorkingMode workingMode = 6;
  if (this->workingmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->workingmode());
  }

  // int32 timeLimit = 7;
  if (this->timelimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timelimit());
  }

  // float containerWeight = 8;
  if (this->containerweight() != 0) {
    total_size += 1 + 4;
  }

  // .platoon.communication.ContainerForm containerForm = 9;
  if (this->containerform() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->containerform());
  }

  // .platoon.communication.ContainerType containerType = 10;
  if (this->containertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->containertype());
  }

  // .platoon.communication.ContainerLocation containerLocation = 11;
  if (this->containerlocation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->containerlocation());
  }

  // int32 inchingDistance = 13;
  if (this->inchingdistance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inchingdistance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveUnitOperation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveUnitOperation*>(&from));
}

void DriveUnitOperation::MergeFrom(const DriveUnitOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.DriveUnitOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nextpath_.MergeFrom(from.nextpath_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.vehicleid().size() > 0) {

    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.actionid() != 0) {
    set_actionid(from.actionid());
  }
  if (from.operationcode() != 0) {
    set_operationcode(from.operationcode());
  }
  if (from.workingmode() != 0) {
    set_workingmode(from.workingmode());
  }
  if (from.timelimit() != 0) {
    set_timelimit(from.timelimit());
  }
  if (from.containerweight() != 0) {
    set_containerweight(from.containerweight());
  }
  if (from.containerform() != 0) {
    set_containerform(from.containerform());
  }
  if (from.containertype() != 0) {
    set_containertype(from.containertype());
  }
  if (from.containerlocation() != 0) {
    set_containerlocation(from.containerlocation());
  }
  if (from.inchingdistance() != 0) {
    set_inchingdistance(from.inchingdistance());
  }
}

void DriveUnitOperation::CopyFrom(const DriveUnitOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.DriveUnitOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveUnitOperation::IsInitialized() const {
  return true;
}

void DriveUnitOperation::Swap(DriveUnitOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveUnitOperation::InternalSwap(DriveUnitOperation* other) {
  nextpath_.InternalSwap(&other->nextpath_);
  id_.Swap(&other->id_);
  vehicleid_.Swap(&other->vehicleid_);
  signature_.Swap(&other->signature_);
  std::swap(taskid_, other->taskid_);
  std::swap(actionid_, other->actionid_);
  std::swap(operationcode_, other->operationcode_);
  std::swap(workingmode_, other->workingmode_);
  std::swap(timelimit_, other->timelimit_);
  std::swap(containerweight_, other->containerweight_);
  std::swap(containerform_, other->containerform_);
  std::swap(containertype_, other->containertype_);
  std::swap(containerlocation_, other->containerlocation_);
  std::swap(inchingdistance_, other->inchingdistance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveUnitOperation::GetTypeName() const {
  return "platoon.communication.DriveUnitOperation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveUnitOperation

// string id = 1;
void DriveUnitOperation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveUnitOperation::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.id)
  return id_.GetNoArena();
}
void DriveUnitOperation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.id)
}
#if LANG_CXX11
void DriveUnitOperation::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperation.id)
}
#endif
void DriveUnitOperation::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperation.id)
}
void DriveUnitOperation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperation.id)
}
::std::string* DriveUnitOperation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveUnitOperation::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveUnitOperation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperation.id)
}

// string vehicleId = 2;
void DriveUnitOperation::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveUnitOperation::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.vehicleId)
  return vehicleid_.GetNoArena();
}
void DriveUnitOperation::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.vehicleId)
}
#if LANG_CXX11
void DriveUnitOperation::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperation.vehicleId)
}
#endif
void DriveUnitOperation::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperation.vehicleId)
}
void DriveUnitOperation::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperation.vehicleId)
}
::std::string* DriveUnitOperation::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperation.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveUnitOperation::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperation.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveUnitOperation::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperation.vehicleId)
}

// int32 taskId = 3;
void DriveUnitOperation::clear_taskid() {
  taskid_ = 0;
}
::google::protobuf::int32 DriveUnitOperation::taskid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.taskId)
  return taskid_;
}
void DriveUnitOperation::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.taskId)
}

// int32 actionId = 4;
void DriveUnitOperation::clear_actionid() {
  actionid_ = 0;
}
::google::protobuf::int32 DriveUnitOperation::actionid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.actionId)
  return actionid_;
}
void DriveUnitOperation::set_actionid(::google::protobuf::int32 value) {
  
  actionid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.actionId)
}

// .platoon.communication.OperationCode operationCode = 5;
void DriveUnitOperation::clear_operationcode() {
  operationcode_ = 0;
}
::platoon::communication::OperationCode DriveUnitOperation::operationcode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.operationCode)
  return static_cast< ::platoon::communication::OperationCode >(operationcode_);
}
void DriveUnitOperation::set_operationcode(::platoon::communication::OperationCode value) {
  
  operationcode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.operationCode)
}

// .platoon.communication.WorkingMode workingMode = 6;
void DriveUnitOperation::clear_workingmode() {
  workingmode_ = 0;
}
::platoon::communication::WorkingMode DriveUnitOperation::workingmode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.workingMode)
  return static_cast< ::platoon::communication::WorkingMode >(workingmode_);
}
void DriveUnitOperation::set_workingmode(::platoon::communication::WorkingMode value) {
  
  workingmode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.workingMode)
}

// int32 timeLimit = 7;
void DriveUnitOperation::clear_timelimit() {
  timelimit_ = 0;
}
::google::protobuf::int32 DriveUnitOperation::timelimit() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.timeLimit)
  return timelimit_;
}
void DriveUnitOperation::set_timelimit(::google::protobuf::int32 value) {
  
  timelimit_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.timeLimit)
}

// float containerWeight = 8;
void DriveUnitOperation::clear_containerweight() {
  containerweight_ = 0;
}
float DriveUnitOperation::containerweight() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.containerWeight)
  return containerweight_;
}
void DriveUnitOperation::set_containerweight(float value) {
  
  containerweight_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.containerWeight)
}

// .platoon.communication.ContainerForm containerForm = 9;
void DriveUnitOperation::clear_containerform() {
  containerform_ = 0;
}
::platoon::communication::ContainerForm DriveUnitOperation::containerform() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.containerForm)
  return static_cast< ::platoon::communication::ContainerForm >(containerform_);
}
void DriveUnitOperation::set_containerform(::platoon::communication::ContainerForm value) {
  
  containerform_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.containerForm)
}

// .platoon.communication.ContainerType containerType = 10;
void DriveUnitOperation::clear_containertype() {
  containertype_ = 0;
}
::platoon::communication::ContainerType DriveUnitOperation::containertype() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.containerType)
  return static_cast< ::platoon::communication::ContainerType >(containertype_);
}
void DriveUnitOperation::set_containertype(::platoon::communication::ContainerType value) {
  
  containertype_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.containerType)
}

// .platoon.communication.ContainerLocation containerLocation = 11;
void DriveUnitOperation::clear_containerlocation() {
  containerlocation_ = 0;
}
::platoon::communication::ContainerLocation DriveUnitOperation::containerlocation() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.containerLocation)
  return static_cast< ::platoon::communication::ContainerLocation >(containerlocation_);
}
void DriveUnitOperation::set_containerlocation(::platoon::communication::ContainerLocation value) {
  
  containerlocation_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.containerLocation)
}

// repeated .platoon.communication.Path nextPath = 12;
int DriveUnitOperation::nextpath_size() const {
  return nextpath_.size();
}
void DriveUnitOperation::clear_nextpath() {
  nextpath_.Clear();
}
const ::platoon::communication::Path& DriveUnitOperation::nextpath(int index) const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.nextPath)
  return nextpath_.Get(index);
}
::platoon::communication::Path* DriveUnitOperation::mutable_nextpath(int index) {
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperation.nextPath)
  return nextpath_.Mutable(index);
}
::platoon::communication::Path* DriveUnitOperation::add_nextpath() {
  // @@protoc_insertion_point(field_add:platoon.communication.DriveUnitOperation.nextPath)
  return nextpath_.Add();
}
::google::protobuf::RepeatedPtrField< ::platoon::communication::Path >*
DriveUnitOperation::mutable_nextpath() {
  // @@protoc_insertion_point(field_mutable_list:platoon.communication.DriveUnitOperation.nextPath)
  return &nextpath_;
}
const ::google::protobuf::RepeatedPtrField< ::platoon::communication::Path >&
DriveUnitOperation::nextpath() const {
  // @@protoc_insertion_point(field_list:platoon.communication.DriveUnitOperation.nextPath)
  return nextpath_;
}

// int32 inchingDistance = 13;
void DriveUnitOperation::clear_inchingdistance() {
  inchingdistance_ = 0;
}
::google::protobuf::int32 DriveUnitOperation::inchingdistance() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.inchingDistance)
  return inchingdistance_;
}
void DriveUnitOperation::set_inchingdistance(::google::protobuf::int32 value) {
  
  inchingdistance_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.inchingDistance)
}

// string signature = 14;
void DriveUnitOperation::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveUnitOperation::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.signature)
  return signature_.GetNoArena();
}
void DriveUnitOperation::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.signature)
}
#if LANG_CXX11
void DriveUnitOperation::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperation.signature)
}
#endif
void DriveUnitOperation::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperation.signature)
}
void DriveUnitOperation::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperation.signature)
}
::std::string* DriveUnitOperation::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperation.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveUnitOperation::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperation.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveUnitOperation::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperation.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kIdFieldNumber;
const int Path::kPosXFieldNumber;
const int Path::kPosYFieldNumber;
const int Path::kPathTypeFieldNumber;
const int Path::kEliminateLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.Path)
}
Path::Path(const Path& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      eliminatelaneid_(from.eliminatelaneid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&posx_, &from.posx_,
    reinterpret_cast<char*>(&pathtype_) -
    reinterpret_cast<char*>(&posx_) + sizeof(pathtype_));
  // @@protoc_insertion_point(copy_constructor:platoon.communication.Path)
}

void Path::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posx_, 0, reinterpret_cast<char*>(&pathtype_) -
    reinterpret_cast<char*>(&posx_) + sizeof(pathtype_));
  _cached_size_ = 0;
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:platoon.communication.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Path& Path::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.Path)
  eliminatelaneid_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posx_, 0, reinterpret_cast<char*>(&pathtype_) -
    reinterpret_cast<char*>(&posx_) + sizeof(pathtype_));
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.Path.Id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double posX = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double posY = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.PathType pathType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pathtype(static_cast< ::platoon::communication::PathType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string eliminateLaneId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_eliminatelaneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->eliminatelaneid(this->eliminatelaneid_size() - 1).data(),
            this->eliminatelaneid(this->eliminatelaneid_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.Path.eliminateLaneId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.Path.Id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // double posX = 2;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->posx(), output);
  }

  // double posY = 3;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->posy(), output);
  }

  // .platoon.communication.PathType pathType = 4;
  if (this->pathtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pathtype(), output);
  }

  // repeated string eliminateLaneId = 5;
  for (int i = 0, n = this->eliminatelaneid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->eliminatelaneid(i).data(), this->eliminatelaneid(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.Path.eliminateLaneId");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->eliminatelaneid(i), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.Path)
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.Path)
  size_t total_size = 0;

  // repeated string eliminateLaneId = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->eliminatelaneid_size());
  for (int i = 0, n = this->eliminatelaneid_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->eliminatelaneid(i));
  }

  // string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // double posX = 2;
  if (this->posx() != 0) {
    total_size += 1 + 8;
  }

  // double posY = 3;
  if (this->posy() != 0) {
    total_size += 1 + 8;
  }

  // .platoon.communication.PathType pathType = 4;
  if (this->pathtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pathtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Path*>(&from));
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  eliminatelaneid_.MergeFrom(from.eliminatelaneid_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.pathtype() != 0) {
    set_pathtype(from.pathtype());
  }
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  eliminatelaneid_.InternalSwap(&other->eliminatelaneid_);
  id_.Swap(&other->id_);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(pathtype_, other->pathtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Path::GetTypeName() const {
  return "platoon.communication.Path";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// string Id = 1;
void Path::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Path::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.Id)
  return id_.GetNoArena();
}
void Path::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.Path.Id)
}
#if LANG_CXX11
void Path::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.Path.Id)
}
#endif
void Path::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.Path.Id)
}
void Path::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.Path.Id)
}
::std::string* Path::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.Path.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Path::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.Path.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Path::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.Path.Id)
}

// double posX = 2;
void Path::clear_posx() {
  posx_ = 0;
}
double Path::posx() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.posX)
  return posx_;
}
void Path::set_posx(double value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Path.posX)
}

// double posY = 3;
void Path::clear_posy() {
  posy_ = 0;
}
double Path::posy() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.posY)
  return posy_;
}
void Path::set_posy(double value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Path.posY)
}

// .platoon.communication.PathType pathType = 4;
void Path::clear_pathtype() {
  pathtype_ = 0;
}
::platoon::communication::PathType Path::pathtype() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.pathType)
  return static_cast< ::platoon::communication::PathType >(pathtype_);
}
void Path::set_pathtype(::platoon::communication::PathType value) {
  
  pathtype_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Path.pathType)
}

// repeated string eliminateLaneId = 5;
int Path::eliminatelaneid_size() const {
  return eliminatelaneid_.size();
}
void Path::clear_eliminatelaneid() {
  eliminatelaneid_.Clear();
}
const ::std::string& Path::eliminatelaneid(int index) const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.eliminateLaneId)
  return eliminatelaneid_.Get(index);
}
::std::string* Path::mutable_eliminatelaneid(int index) {
  // @@protoc_insertion_point(field_mutable:platoon.communication.Path.eliminateLaneId)
  return eliminatelaneid_.Mutable(index);
}
void Path::set_eliminatelaneid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:platoon.communication.Path.eliminateLaneId)
  eliminatelaneid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Path::set_eliminatelaneid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:platoon.communication.Path.eliminateLaneId)
  eliminatelaneid_.Mutable(index)->assign(std::move(value));
}
#endif
void Path::set_eliminatelaneid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  eliminatelaneid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:platoon.communication.Path.eliminateLaneId)
}
void Path::set_eliminatelaneid(int index, const char* value, size_t size) {
  eliminatelaneid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.Path.eliminateLaneId)
}
::std::string* Path::add_eliminatelaneid() {
  // @@protoc_insertion_point(field_add_mutable:platoon.communication.Path.eliminateLaneId)
  return eliminatelaneid_.Add();
}
void Path::add_eliminatelaneid(const ::std::string& value) {
  eliminatelaneid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:platoon.communication.Path.eliminateLaneId)
}
#if LANG_CXX11
void Path::add_eliminatelaneid(::std::string&& value) {
  eliminatelaneid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:platoon.communication.Path.eliminateLaneId)
}
#endif
void Path::add_eliminatelaneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  eliminatelaneid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:platoon.communication.Path.eliminateLaneId)
}
void Path::add_eliminatelaneid(const char* value, size_t size) {
  eliminatelaneid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:platoon.communication.Path.eliminateLaneId)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Path::eliminatelaneid() const {
  // @@protoc_insertion_point(field_list:platoon.communication.Path.eliminateLaneId)
  return eliminatelaneid_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Path::mutable_eliminatelaneid() {
  // @@protoc_insertion_point(field_mutable_list:platoon.communication.Path.eliminateLaneId)
  return &eliminatelaneid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveUnitOperationResult::kIdFieldNumber;
const int DriveUnitOperationResult::kVehicleIdFieldNumber;
const int DriveUnitOperationResult::kTaskIdFieldNumber;
const int DriveUnitOperationResult::kActionIdFieldNumber;
const int DriveUnitOperationResult::kOperationCodeFieldNumber;
const int DriveUnitOperationResult::kResultFieldNumber;
const int DriveUnitOperationResult::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveUnitOperationResult::DriveUnitOperationResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.DriveUnitOperationResult)
}
DriveUnitOperationResult::DriveUnitOperationResult(const DriveUnitOperationResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicleid().size() > 0) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&taskid_, &from.taskid_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:platoon.communication.DriveUnitOperationResult)
}

void DriveUnitOperationResult::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(result_));
  _cached_size_ = 0;
}

DriveUnitOperationResult::~DriveUnitOperationResult() {
  // @@protoc_insertion_point(destructor:platoon.communication.DriveUnitOperationResult)
  SharedDtor();
}

void DriveUnitOperationResult::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriveUnitOperationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveUnitOperationResult& DriveUnitOperationResult::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveUnitOperationResult* DriveUnitOperationResult::New(::google::protobuf::Arena* arena) const {
  DriveUnitOperationResult* n = new DriveUnitOperationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveUnitOperationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.DriveUnitOperationResult)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(result_));
}

bool DriveUnitOperationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.DriveUnitOperationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DriveUnitOperationResult.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicleId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicleid().data(), this->vehicleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DriveUnitOperationResult.vehicleId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 taskId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actionId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.OperationCode operationCode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operationcode(static_cast< ::platoon::communication::OperationCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.DriveUnitOperationResult.TASK_PerfResult result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::platoon::communication::DriveUnitOperationResult_TASK_PerfResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DriveUnitOperationResult.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.DriveUnitOperationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.DriveUnitOperationResult)
  return false;
#undef DO_
}

void DriveUnitOperationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.DriveUnitOperationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DriveUnitOperationResult.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicleid().data(), this->vehicleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DriveUnitOperationResult.vehicleId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicleid(), output);
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->taskid(), output);
  }

  // int32 actionId = 4;
  if (this->actionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actionid(), output);
  }

  // .platoon.communication.OperationCode operationCode = 5;
  if (this->operationcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->operationcode(), output);
  }

  // .platoon.communication.DriveUnitOperationResult.TASK_PerfResult result = 6;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->result(), output);
  }

  // string signature = 7;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DriveUnitOperationResult.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.DriveUnitOperationResult)
}

size_t DriveUnitOperationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.DriveUnitOperationResult)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleid());
  }

  // string signature = 7;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  // int32 actionId = 4;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionid());
  }

  // .platoon.communication.OperationCode operationCode = 5;
  if (this->operationcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operationcode());
  }

  // .platoon.communication.DriveUnitOperationResult.TASK_PerfResult result = 6;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveUnitOperationResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveUnitOperationResult*>(&from));
}

void DriveUnitOperationResult::MergeFrom(const DriveUnitOperationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.DriveUnitOperationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.vehicleid().size() > 0) {

    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.actionid() != 0) {
    set_actionid(from.actionid());
  }
  if (from.operationcode() != 0) {
    set_operationcode(from.operationcode());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void DriveUnitOperationResult::CopyFrom(const DriveUnitOperationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.DriveUnitOperationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveUnitOperationResult::IsInitialized() const {
  return true;
}

void DriveUnitOperationResult::Swap(DriveUnitOperationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveUnitOperationResult::InternalSwap(DriveUnitOperationResult* other) {
  id_.Swap(&other->id_);
  vehicleid_.Swap(&other->vehicleid_);
  signature_.Swap(&other->signature_);
  std::swap(taskid_, other->taskid_);
  std::swap(actionid_, other->actionid_);
  std::swap(operationcode_, other->operationcode_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveUnitOperationResult::GetTypeName() const {
  return "platoon.communication.DriveUnitOperationResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveUnitOperationResult

// string id = 1;
void DriveUnitOperationResult::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveUnitOperationResult::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.id)
  return id_.GetNoArena();
}
void DriveUnitOperationResult::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.id)
}
#if LANG_CXX11
void DriveUnitOperationResult::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperationResult.id)
}
#endif
void DriveUnitOperationResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperationResult.id)
}
void DriveUnitOperationResult::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperationResult.id)
}
::std::string* DriveUnitOperationResult::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperationResult.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveUnitOperationResult::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperationResult.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveUnitOperationResult::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperationResult.id)
}

// string vehicleId = 2;
void DriveUnitOperationResult::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveUnitOperationResult::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.vehicleId)
  return vehicleid_.GetNoArena();
}
void DriveUnitOperationResult::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.vehicleId)
}
#if LANG_CXX11
void DriveUnitOperationResult::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperationResult.vehicleId)
}
#endif
void DriveUnitOperationResult::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperationResult.vehicleId)
}
void DriveUnitOperationResult::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperationResult.vehicleId)
}
::std::string* DriveUnitOperationResult::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperationResult.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveUnitOperationResult::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperationResult.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveUnitOperationResult::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperationResult.vehicleId)
}

// int32 taskId = 3;
void DriveUnitOperationResult::clear_taskid() {
  taskid_ = 0;
}
::google::protobuf::int32 DriveUnitOperationResult::taskid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.taskId)
  return taskid_;
}
void DriveUnitOperationResult::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.taskId)
}

// int32 actionId = 4;
void DriveUnitOperationResult::clear_actionid() {
  actionid_ = 0;
}
::google::protobuf::int32 DriveUnitOperationResult::actionid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.actionId)
  return actionid_;
}
void DriveUnitOperationResult::set_actionid(::google::protobuf::int32 value) {
  
  actionid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.actionId)
}

// .platoon.communication.OperationCode operationCode = 5;
void DriveUnitOperationResult::clear_operationcode() {
  operationcode_ = 0;
}
::platoon::communication::OperationCode DriveUnitOperationResult::operationcode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.operationCode)
  return static_cast< ::platoon::communication::OperationCode >(operationcode_);
}
void DriveUnitOperationResult::set_operationcode(::platoon::communication::OperationCode value) {
  
  operationcode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.operationCode)
}

// .platoon.communication.DriveUnitOperationResult.TASK_PerfResult result = 6;
void DriveUnitOperationResult::clear_result() {
  result_ = 0;
}
::platoon::communication::DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult::result() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.result)
  return static_cast< ::platoon::communication::DriveUnitOperationResult_TASK_PerfResult >(result_);
}
void DriveUnitOperationResult::set_result(::platoon::communication::DriveUnitOperationResult_TASK_PerfResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.result)
}

// string signature = 7;
void DriveUnitOperationResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveUnitOperationResult::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.signature)
  return signature_.GetNoArena();
}
void DriveUnitOperationResult::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.signature)
}
#if LANG_CXX11
void DriveUnitOperationResult::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperationResult.signature)
}
#endif
void DriveUnitOperationResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperationResult.signature)
}
void DriveUnitOperationResult::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperationResult.signature)
}
::std::string* DriveUnitOperationResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperationResult.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveUnitOperationResult::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperationResult.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveUnitOperationResult::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperationResult.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DspFeedbackFrame::kVehicleIdFieldNumber;
const int DspFeedbackFrame::kTaskIdFieldNumber;
const int DspFeedbackFrame::kActionIdFieldNumber;
const int DspFeedbackFrame::kVehicleStatusFieldNumber;
const int DspFeedbackFrame::kEnergyLevelFieldNumber;
const int DspFeedbackFrame::kWorkingModeFieldNumber;
const int DspFeedbackFrame::kMileageFieldNumber;
const int DspFeedbackFrame::kCurLaneIdFieldNumber;
const int DspFeedbackFrame::kPreLaneIdFieldNumber;
const int DspFeedbackFrame::kNextLaneIdFieldNumber;
const int DspFeedbackFrame::kLongitudeFieldNumber;
const int DspFeedbackFrame::kLatitudeFieldNumber;
const int DspFeedbackFrame::kErrorCodeFieldNumber;
const int DspFeedbackFrame::kSpeedFieldNumber;
const int DspFeedbackFrame::kHeadingFieldNumber;
const int DspFeedbackFrame::kContainerWeightFieldNumber;
const int DspFeedbackFrame::kWithContainerFieldNumber;
const int DspFeedbackFrame::kContainerLocationFieldNumber;
const int DspFeedbackFrame::kCurtimeFieldNumber;
const int DspFeedbackFrame::kCurBayIdFieldNumber;
const int DspFeedbackFrame::kCurPortIdFieldNumber;
const int DspFeedbackFrame::kFleetIdFieldNumber;
const int DspFeedbackFrame::kSignatureFieldNumber;
const int DspFeedbackFrame::kSubMileageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DspFeedbackFrame::DspFeedbackFrame()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.DspFeedbackFrame)
}
DspFeedbackFrame::DspFeedbackFrame(const DspFeedbackFrame& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicleid().size() > 0) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  curlaneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.curlaneid().size() > 0) {
    curlaneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curlaneid_);
  }
  prelaneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prelaneid().size() > 0) {
    prelaneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prelaneid_);
  }
  nextlaneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nextlaneid().size() > 0) {
    nextlaneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nextlaneid_);
  }
  curbayid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.curbayid().size() > 0) {
    curbayid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curbayid_);
  }
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fleetid().size() > 0) {
    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_curtime()) {
    curtime_ = new ::google::protobuf::Timestamp(*from.curtime_);
  } else {
    curtime_ = NULL;
  }
  ::memcpy(&taskid_, &from.taskid_,
    reinterpret_cast<char*>(&submileage_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(submileage_));
  // @@protoc_insertion_point(copy_constructor:platoon.communication.DspFeedbackFrame)
}

void DspFeedbackFrame::SharedCtor() {
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curlaneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prelaneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nextlaneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curbayid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&curtime_, 0, reinterpret_cast<char*>(&submileage_) -
    reinterpret_cast<char*>(&curtime_) + sizeof(submileage_));
  _cached_size_ = 0;
}

DspFeedbackFrame::~DspFeedbackFrame() {
  // @@protoc_insertion_point(destructor:platoon.communication.DspFeedbackFrame)
  SharedDtor();
}

void DspFeedbackFrame::SharedDtor() {
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curlaneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prelaneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nextlaneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curbayid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete curtime_;
  }
}

void DspFeedbackFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DspFeedbackFrame& DspFeedbackFrame::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

DspFeedbackFrame* DspFeedbackFrame::New(::google::protobuf::Arena* arena) const {
  DspFeedbackFrame* n = new DspFeedbackFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DspFeedbackFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.DspFeedbackFrame)
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curlaneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prelaneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nextlaneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curbayid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && curtime_ != NULL) {
    delete curtime_;
  }
  curtime_ = NULL;
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&submileage_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(submileage_));
}

bool DspFeedbackFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.DspFeedbackFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string vehicleId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicleid().data(), this->vehicleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DspFeedbackFrame.vehicleId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 taskId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.VehicleStatus vehicleStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vehiclestatus(static_cast< ::platoon::communication::VehicleStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.WorkingMode workingMode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_workingmode(static_cast< ::platoon::communication::WorkingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float energyLevel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energylevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mileage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string curLaneId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curlaneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->curlaneid().data(), this->curlaneid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DspFeedbackFrame.curLaneId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string preLaneId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prelaneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prelaneid().data(), this->prelaneid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DspFeedbackFrame.preLaneId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nextLaneId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextlaneid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nextlaneid().data(), this->nextlaneid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DspFeedbackFrame.nextLaneId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 errorCode = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 containerWeight = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containerweight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool withContainer = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &withcontainer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.ContainerLocation containerLocation = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_containerlocation(static_cast< ::platoon::communication::ContainerLocation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp curtime = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string curBayId = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curbayid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->curbayid().data(), this->curbayid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DspFeedbackFrame.curBayId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.Port_Id curPortId = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_curportid(static_cast< ::platoon::communication::Port_Id >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fleetId = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fleetid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fleetid().data(), this->fleetid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DspFeedbackFrame.fleetId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.DspFeedbackFrame.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float subMileage = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &submileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.DspFeedbackFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.DspFeedbackFrame)
  return false;
#undef DO_
}

void DspFeedbackFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.DspFeedbackFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vehicleId = 1;
  if (this->vehicleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicleid().data(), this->vehicleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DspFeedbackFrame.vehicleId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vehicleid(), output);
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->taskid(), output);
  }

  // int32 actionId = 3;
  if (this->actionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionid(), output);
  }

  // .platoon.communication.VehicleStatus vehicleStatus = 4;
  if (this->vehiclestatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->vehiclestatus(), output);
  }

  // .platoon.communication.WorkingMode workingMode = 5;
  if (this->workingmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->workingmode(), output);
  }

  // float energyLevel = 6;
  if (this->energylevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->energylevel(), output);
  }

  // float mileage = 7;
  if (this->mileage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mileage(), output);
  }

  // string curLaneId = 8;
  if (this->curlaneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curlaneid().data(), this->curlaneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DspFeedbackFrame.curLaneId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->curlaneid(), output);
  }

  // string preLaneId = 9;
  if (this->prelaneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prelaneid().data(), this->prelaneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DspFeedbackFrame.preLaneId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->prelaneid(), output);
  }

  // string nextLaneId = 10;
  if (this->nextlaneid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nextlaneid().data(), this->nextlaneid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DspFeedbackFrame.nextLaneId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->nextlaneid(), output);
  }

  // double longitude = 11;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->longitude(), output);
  }

  // double latitude = 12;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->latitude(), output);
  }

  // int32 errorCode = 13;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->errorcode(), output);
  }

  // float speed = 14;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->speed(), output);
  }

  // float heading = 15;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->heading(), output);
  }

  // int32 containerWeight = 16;
  if (this->containerweight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->containerweight(), output);
  }

  // bool withContainer = 17;
  if (this->withcontainer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->withcontainer(), output);
  }

  // .platoon.communication.ContainerLocation containerLocation = 18;
  if (this->containerlocation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->containerlocation(), output);
  }

  // .google.protobuf.Timestamp curtime = 19;
  if (this->has_curtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->curtime_, output);
  }

  // string curBayId = 20;
  if (this->curbayid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curbayid().data(), this->curbayid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DspFeedbackFrame.curBayId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->curbayid(), output);
  }

  // .platoon.communication.Port_Id curPortId = 21;
  if (this->curportid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->curportid(), output);
  }

  // string fleetId = 22;
  if (this->fleetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleetid().data(), this->fleetid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DspFeedbackFrame.fleetId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->fleetid(), output);
  }

  // string signature = 23;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.DspFeedbackFrame.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->signature(), output);
  }

  // float subMileage = 24;
  if (this->submileage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->submileage(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.DspFeedbackFrame)
}

size_t DspFeedbackFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.DspFeedbackFrame)
  size_t total_size = 0;

  // string vehicleId = 1;
  if (this->vehicleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleid());
  }

  // string curLaneId = 8;
  if (this->curlaneid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curlaneid());
  }

  // string preLaneId = 9;
  if (this->prelaneid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prelaneid());
  }

  // string nextLaneId = 10;
  if (this->nextlaneid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nextlaneid());
  }

  // string curBayId = 20;
  if (this->curbayid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curbayid());
  }

  // string fleetId = 22;
  if (this->fleetid().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fleetid());
  }

  // string signature = 23;
  if (this->signature().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // .google.protobuf.Timestamp curtime = 19;
  if (this->has_curtime()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->curtime_);
  }

  // int32 taskId = 2;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  // int32 actionId = 3;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionid());
  }

  // .platoon.communication.VehicleStatus vehicleStatus = 4;
  if (this->vehiclestatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehiclestatus());
  }

  // .platoon.communication.WorkingMode workingMode = 5;
  if (this->workingmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->workingmode());
  }

  // float energyLevel = 6;
  if (this->energylevel() != 0) {
    total_size += 1 + 4;
  }

  // float mileage = 7;
  if (this->mileage() != 0) {
    total_size += 1 + 4;
  }

  // double longitude = 11;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 12;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // int32 errorCode = 13;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // float speed = 14;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // float heading = 15;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  // int32 containerWeight = 16;
  if (this->containerweight() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->containerweight());
  }

  // bool withContainer = 17;
  if (this->withcontainer() != 0) {
    total_size += 2 + 1;
  }

  // .platoon.communication.ContainerLocation containerLocation = 18;
  if (this->containerlocation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->containerlocation());
  }

  // .platoon.communication.Port_Id curPortId = 21;
  if (this->curportid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curportid());
  }

  // float subMileage = 24;
  if (this->submileage() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DspFeedbackFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DspFeedbackFrame*>(&from));
}

void DspFeedbackFrame::MergeFrom(const DspFeedbackFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.DspFeedbackFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicleid().size() > 0) {

    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  if (from.curlaneid().size() > 0) {

    curlaneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curlaneid_);
  }
  if (from.prelaneid().size() > 0) {

    prelaneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prelaneid_);
  }
  if (from.nextlaneid().size() > 0) {

    nextlaneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nextlaneid_);
  }
  if (from.curbayid().size() > 0) {

    curbayid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curbayid_);
  }
  if (from.fleetid().size() > 0) {

    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_curtime()) {
    mutable_curtime()->::google::protobuf::Timestamp::MergeFrom(from.curtime());
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.actionid() != 0) {
    set_actionid(from.actionid());
  }
  if (from.vehiclestatus() != 0) {
    set_vehiclestatus(from.vehiclestatus());
  }
  if (from.workingmode() != 0) {
    set_workingmode(from.workingmode());
  }
  if (from.energylevel() != 0) {
    set_energylevel(from.energylevel());
  }
  if (from.mileage() != 0) {
    set_mileage(from.mileage());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.containerweight() != 0) {
    set_containerweight(from.containerweight());
  }
  if (from.withcontainer() != 0) {
    set_withcontainer(from.withcontainer());
  }
  if (from.containerlocation() != 0) {
    set_containerlocation(from.containerlocation());
  }
  if (from.curportid() != 0) {
    set_curportid(from.curportid());
  }
  if (from.submileage() != 0) {
    set_submileage(from.submileage());
  }
}

void DspFeedbackFrame::CopyFrom(const DspFeedbackFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.DspFeedbackFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DspFeedbackFrame::IsInitialized() const {
  return true;
}

void DspFeedbackFrame::Swap(DspFeedbackFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DspFeedbackFrame::InternalSwap(DspFeedbackFrame* other) {
  vehicleid_.Swap(&other->vehicleid_);
  curlaneid_.Swap(&other->curlaneid_);
  prelaneid_.Swap(&other->prelaneid_);
  nextlaneid_.Swap(&other->nextlaneid_);
  curbayid_.Swap(&other->curbayid_);
  fleetid_.Swap(&other->fleetid_);
  signature_.Swap(&other->signature_);
  std::swap(curtime_, other->curtime_);
  std::swap(taskid_, other->taskid_);
  std::swap(actionid_, other->actionid_);
  std::swap(vehiclestatus_, other->vehiclestatus_);
  std::swap(workingmode_, other->workingmode_);
  std::swap(energylevel_, other->energylevel_);
  std::swap(mileage_, other->mileage_);
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(errorcode_, other->errorcode_);
  std::swap(speed_, other->speed_);
  std::swap(heading_, other->heading_);
  std::swap(containerweight_, other->containerweight_);
  std::swap(withcontainer_, other->withcontainer_);
  std::swap(containerlocation_, other->containerlocation_);
  std::swap(curportid_, other->curportid_);
  std::swap(submileage_, other->submileage_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DspFeedbackFrame::GetTypeName() const {
  return "platoon.communication.DspFeedbackFrame";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DspFeedbackFrame

// string vehicleId = 1;
void DspFeedbackFrame::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DspFeedbackFrame::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.vehicleId)
  return vehicleid_.GetNoArena();
}
void DspFeedbackFrame::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.vehicleId)
}
#if LANG_CXX11
void DspFeedbackFrame::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.vehicleId)
}
#endif
void DspFeedbackFrame::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.vehicleId)
}
void DspFeedbackFrame::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.vehicleId)
}
::std::string* DspFeedbackFrame::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DspFeedbackFrame::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DspFeedbackFrame::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.vehicleId)
}

// int32 taskId = 2;
void DspFeedbackFrame::clear_taskid() {
  taskid_ = 0;
}
::google::protobuf::int32 DspFeedbackFrame::taskid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.taskId)
  return taskid_;
}
void DspFeedbackFrame::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.taskId)
}

// int32 actionId = 3;
void DspFeedbackFrame::clear_actionid() {
  actionid_ = 0;
}
::google::protobuf::int32 DspFeedbackFrame::actionid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.actionId)
  return actionid_;
}
void DspFeedbackFrame::set_actionid(::google::protobuf::int32 value) {
  
  actionid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.actionId)
}

// .platoon.communication.VehicleStatus vehicleStatus = 4;
void DspFeedbackFrame::clear_vehiclestatus() {
  vehiclestatus_ = 0;
}
::platoon::communication::VehicleStatus DspFeedbackFrame::vehiclestatus() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.vehicleStatus)
  return static_cast< ::platoon::communication::VehicleStatus >(vehiclestatus_);
}
void DspFeedbackFrame::set_vehiclestatus(::platoon::communication::VehicleStatus value) {
  
  vehiclestatus_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.vehicleStatus)
}

// float energyLevel = 6;
void DspFeedbackFrame::clear_energylevel() {
  energylevel_ = 0;
}
float DspFeedbackFrame::energylevel() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.energyLevel)
  return energylevel_;
}
void DspFeedbackFrame::set_energylevel(float value) {
  
  energylevel_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.energyLevel)
}

// .platoon.communication.WorkingMode workingMode = 5;
void DspFeedbackFrame::clear_workingmode() {
  workingmode_ = 0;
}
::platoon::communication::WorkingMode DspFeedbackFrame::workingmode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.workingMode)
  return static_cast< ::platoon::communication::WorkingMode >(workingmode_);
}
void DspFeedbackFrame::set_workingmode(::platoon::communication::WorkingMode value) {
  
  workingmode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.workingMode)
}

// float mileage = 7;
void DspFeedbackFrame::clear_mileage() {
  mileage_ = 0;
}
float DspFeedbackFrame::mileage() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.mileage)
  return mileage_;
}
void DspFeedbackFrame::set_mileage(float value) {
  
  mileage_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.mileage)
}

// string curLaneId = 8;
void DspFeedbackFrame::clear_curlaneid() {
  curlaneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DspFeedbackFrame::curlaneid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.curLaneId)
  return curlaneid_.GetNoArena();
}
void DspFeedbackFrame::set_curlaneid(const ::std::string& value) {
  
  curlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.curLaneId)
}
#if LANG_CXX11
void DspFeedbackFrame::set_curlaneid(::std::string&& value) {
  
  curlaneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.curLaneId)
}
#endif
void DspFeedbackFrame::set_curlaneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  curlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.curLaneId)
}
void DspFeedbackFrame::set_curlaneid(const char* value, size_t size) {
  
  curlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.curLaneId)
}
::std::string* DspFeedbackFrame::mutable_curlaneid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.curLaneId)
  return curlaneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DspFeedbackFrame::release_curlaneid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.curLaneId)
  
  return curlaneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DspFeedbackFrame::set_allocated_curlaneid(::std::string* curlaneid) {
  if (curlaneid != NULL) {
    
  } else {
    
  }
  curlaneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curlaneid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.curLaneId)
}

// string preLaneId = 9;
void DspFeedbackFrame::clear_prelaneid() {
  prelaneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DspFeedbackFrame::prelaneid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.preLaneId)
  return prelaneid_.GetNoArena();
}
void DspFeedbackFrame::set_prelaneid(const ::std::string& value) {
  
  prelaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.preLaneId)
}
#if LANG_CXX11
void DspFeedbackFrame::set_prelaneid(::std::string&& value) {
  
  prelaneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.preLaneId)
}
#endif
void DspFeedbackFrame::set_prelaneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prelaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.preLaneId)
}
void DspFeedbackFrame::set_prelaneid(const char* value, size_t size) {
  
  prelaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.preLaneId)
}
::std::string* DspFeedbackFrame::mutable_prelaneid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.preLaneId)
  return prelaneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DspFeedbackFrame::release_prelaneid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.preLaneId)
  
  return prelaneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DspFeedbackFrame::set_allocated_prelaneid(::std::string* prelaneid) {
  if (prelaneid != NULL) {
    
  } else {
    
  }
  prelaneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prelaneid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.preLaneId)
}

// string nextLaneId = 10;
void DspFeedbackFrame::clear_nextlaneid() {
  nextlaneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DspFeedbackFrame::nextlaneid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.nextLaneId)
  return nextlaneid_.GetNoArena();
}
void DspFeedbackFrame::set_nextlaneid(const ::std::string& value) {
  
  nextlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.nextLaneId)
}
#if LANG_CXX11
void DspFeedbackFrame::set_nextlaneid(::std::string&& value) {
  
  nextlaneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.nextLaneId)
}
#endif
void DspFeedbackFrame::set_nextlaneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nextlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.nextLaneId)
}
void DspFeedbackFrame::set_nextlaneid(const char* value, size_t size) {
  
  nextlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.nextLaneId)
}
::std::string* DspFeedbackFrame::mutable_nextlaneid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.nextLaneId)
  return nextlaneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DspFeedbackFrame::release_nextlaneid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.nextLaneId)
  
  return nextlaneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DspFeedbackFrame::set_allocated_nextlaneid(::std::string* nextlaneid) {
  if (nextlaneid != NULL) {
    
  } else {
    
  }
  nextlaneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nextlaneid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.nextLaneId)
}

// double longitude = 11;
void DspFeedbackFrame::clear_longitude() {
  longitude_ = 0;
}
double DspFeedbackFrame::longitude() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.longitude)
  return longitude_;
}
void DspFeedbackFrame::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.longitude)
}

// double latitude = 12;
void DspFeedbackFrame::clear_latitude() {
  latitude_ = 0;
}
double DspFeedbackFrame::latitude() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.latitude)
  return latitude_;
}
void DspFeedbackFrame::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.latitude)
}

// int32 errorCode = 13;
void DspFeedbackFrame::clear_errorcode() {
  errorcode_ = 0;
}
::google::protobuf::int32 DspFeedbackFrame::errorcode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.errorCode)
  return errorcode_;
}
void DspFeedbackFrame::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.errorCode)
}

// float speed = 14;
void DspFeedbackFrame::clear_speed() {
  speed_ = 0;
}
float DspFeedbackFrame::speed() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.speed)
  return speed_;
}
void DspFeedbackFrame::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.speed)
}

// float heading = 15;
void DspFeedbackFrame::clear_heading() {
  heading_ = 0;
}
float DspFeedbackFrame::heading() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.heading)
  return heading_;
}
void DspFeedbackFrame::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.heading)
}

// int32 containerWeight = 16;
void DspFeedbackFrame::clear_containerweight() {
  containerweight_ = 0;
}
::google::protobuf::int32 DspFeedbackFrame::containerweight() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.containerWeight)
  return containerweight_;
}
void DspFeedbackFrame::set_containerweight(::google::protobuf::int32 value) {
  
  containerweight_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.containerWeight)
}

// bool withContainer = 17;
void DspFeedbackFrame::clear_withcontainer() {
  withcontainer_ = false;
}
bool DspFeedbackFrame::withcontainer() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.withContainer)
  return withcontainer_;
}
void DspFeedbackFrame::set_withcontainer(bool value) {
  
  withcontainer_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.withContainer)
}

// .platoon.communication.ContainerLocation containerLocation = 18;
void DspFeedbackFrame::clear_containerlocation() {
  containerlocation_ = 0;
}
::platoon::communication::ContainerLocation DspFeedbackFrame::containerlocation() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.containerLocation)
  return static_cast< ::platoon::communication::ContainerLocation >(containerlocation_);
}
void DspFeedbackFrame::set_containerlocation(::platoon::communication::ContainerLocation value) {
  
  containerlocation_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.containerLocation)
}

// .google.protobuf.Timestamp curtime = 19;
bool DspFeedbackFrame::has_curtime() const {
  return this != internal_default_instance() && curtime_ != NULL;
}
void DspFeedbackFrame::clear_curtime() {
  if (GetArenaNoVirtual() == NULL && curtime_ != NULL) delete curtime_;
  curtime_ = NULL;
}
const ::google::protobuf::Timestamp& DspFeedbackFrame::curtime() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.curtime)
  return curtime_ != NULL ? *curtime_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* DspFeedbackFrame::mutable_curtime() {
  
  if (curtime_ == NULL) {
    curtime_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.curtime)
  return curtime_;
}
::google::protobuf::Timestamp* DspFeedbackFrame::release_curtime() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.curtime)
  
  ::google::protobuf::Timestamp* temp = curtime_;
  curtime_ = NULL;
  return temp;
}
void DspFeedbackFrame::set_allocated_curtime(::google::protobuf::Timestamp* curtime) {
  delete curtime_;
  if (curtime != NULL && curtime->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_curtime = new ::google::protobuf::Timestamp;
    new_curtime->CopyFrom(*curtime);
    curtime = new_curtime;
  }
  curtime_ = curtime;
  if (curtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.curtime)
}

// string curBayId = 20;
void DspFeedbackFrame::clear_curbayid() {
  curbayid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DspFeedbackFrame::curbayid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.curBayId)
  return curbayid_.GetNoArena();
}
void DspFeedbackFrame::set_curbayid(const ::std::string& value) {
  
  curbayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.curBayId)
}
#if LANG_CXX11
void DspFeedbackFrame::set_curbayid(::std::string&& value) {
  
  curbayid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.curBayId)
}
#endif
void DspFeedbackFrame::set_curbayid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  curbayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.curBayId)
}
void DspFeedbackFrame::set_curbayid(const char* value, size_t size) {
  
  curbayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.curBayId)
}
::std::string* DspFeedbackFrame::mutable_curbayid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.curBayId)
  return curbayid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DspFeedbackFrame::release_curbayid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.curBayId)
  
  return curbayid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DspFeedbackFrame::set_allocated_curbayid(::std::string* curbayid) {
  if (curbayid != NULL) {
    
  } else {
    
  }
  curbayid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curbayid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.curBayId)
}

// .platoon.communication.Port_Id curPortId = 21;
void DspFeedbackFrame::clear_curportid() {
  curportid_ = 0;
}
::platoon::communication::Port_Id DspFeedbackFrame::curportid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.curPortId)
  return static_cast< ::platoon::communication::Port_Id >(curportid_);
}
void DspFeedbackFrame::set_curportid(::platoon::communication::Port_Id value) {
  
  curportid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.curPortId)
}

// string fleetId = 22;
void DspFeedbackFrame::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DspFeedbackFrame::fleetid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.fleetId)
  return fleetid_.GetNoArena();
}
void DspFeedbackFrame::set_fleetid(const ::std::string& value) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.fleetId)
}
#if LANG_CXX11
void DspFeedbackFrame::set_fleetid(::std::string&& value) {
  
  fleetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.fleetId)
}
#endif
void DspFeedbackFrame::set_fleetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.fleetId)
}
void DspFeedbackFrame::set_fleetid(const char* value, size_t size) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.fleetId)
}
::std::string* DspFeedbackFrame::mutable_fleetid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.fleetId)
  return fleetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DspFeedbackFrame::release_fleetid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.fleetId)
  
  return fleetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DspFeedbackFrame::set_allocated_fleetid(::std::string* fleetid) {
  if (fleetid != NULL) {
    
  } else {
    
  }
  fleetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.fleetId)
}

// string signature = 23;
void DspFeedbackFrame::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DspFeedbackFrame::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.signature)
  return signature_.GetNoArena();
}
void DspFeedbackFrame::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.signature)
}
#if LANG_CXX11
void DspFeedbackFrame::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.signature)
}
#endif
void DspFeedbackFrame::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.signature)
}
void DspFeedbackFrame::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.signature)
}
::std::string* DspFeedbackFrame::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DspFeedbackFrame::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DspFeedbackFrame::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.signature)
}

// float subMileage = 24;
void DspFeedbackFrame::clear_submileage() {
  submileage_ = 0;
}
float DspFeedbackFrame::submileage() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.subMileage)
  return submileage_;
}
void DspFeedbackFrame::set_submileage(float value) {
  
  submileage_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.subMileage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequireLane::kIdFieldNumber;
const int RequireLane::kLinkIdFieldNumber;
const int RequireLane::kVehicleIdFieldNumber;
const int RequireLane::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequireLane::RequireLane()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.RequireLane)
}
RequireLane::RequireLane(const RequireLane& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  linkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.linkid().size() > 0) {
    linkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkid_);
  }
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicleid().size() > 0) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:platoon.communication.RequireLane)
}

void RequireLane::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequireLane::~RequireLane() {
  // @@protoc_insertion_point(destructor:platoon.communication.RequireLane)
  SharedDtor();
}

void RequireLane::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequireLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequireLane& RequireLane::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequireLane* RequireLane::New(::google::protobuf::Arena* arena) const {
  RequireLane* n = new RequireLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequireLane::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.RequireLane)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequireLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.RequireLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.RequireLane.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string linkId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->linkid().data(), this->linkid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.RequireLane.linkId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicleId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicleid().data(), this->vehicleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.RequireLane.vehicleId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.RequireLane.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.RequireLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.RequireLane)
  return false;
#undef DO_
}

void RequireLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.RequireLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.RequireLane.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string linkId = 2;
  if (this->linkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linkid().data(), this->linkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.RequireLane.linkId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->linkid(), output);
  }

  // string vehicleId = 3;
  if (this->vehicleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicleid().data(), this->vehicleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.RequireLane.vehicleId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vehicleid(), output);
  }

  // string signature = 4;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.RequireLane.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.RequireLane)
}

size_t RequireLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.RequireLane)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string linkId = 2;
  if (this->linkid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->linkid());
  }

  // string vehicleId = 3;
  if (this->vehicleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleid());
  }

  // string signature = 4;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequireLane::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequireLane*>(&from));
}

void RequireLane::MergeFrom(const RequireLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.RequireLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.linkid().size() > 0) {

    linkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkid_);
  }
  if (from.vehicleid().size() > 0) {

    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void RequireLane::CopyFrom(const RequireLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.RequireLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequireLane::IsInitialized() const {
  return true;
}

void RequireLane::Swap(RequireLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequireLane::InternalSwap(RequireLane* other) {
  id_.Swap(&other->id_);
  linkid_.Swap(&other->linkid_);
  vehicleid_.Swap(&other->vehicleid_);
  signature_.Swap(&other->signature_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RequireLane::GetTypeName() const {
  return "platoon.communication.RequireLane";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequireLane

// string id = 1;
void RequireLane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequireLane::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLane.id)
  return id_.GetNoArena();
}
void RequireLane::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLane.id)
}
#if LANG_CXX11
void RequireLane::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLane.id)
}
#endif
void RequireLane::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLane.id)
}
void RequireLane::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLane.id)
}
::std::string* RequireLane::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequireLane::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLane.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequireLane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLane.id)
}

// string linkId = 2;
void RequireLane::clear_linkid() {
  linkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequireLane::linkid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLane.linkId)
  return linkid_.GetNoArena();
}
void RequireLane::set_linkid(const ::std::string& value) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLane.linkId)
}
#if LANG_CXX11
void RequireLane::set_linkid(::std::string&& value) {
  
  linkid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLane.linkId)
}
#endif
void RequireLane::set_linkid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLane.linkId)
}
void RequireLane::set_linkid(const char* value, size_t size) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLane.linkId)
}
::std::string* RequireLane::mutable_linkid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLane.linkId)
  return linkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequireLane::release_linkid() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLane.linkId)
  
  return linkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequireLane::set_allocated_linkid(::std::string* linkid) {
  if (linkid != NULL) {
    
  } else {
    
  }
  linkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLane.linkId)
}

// string vehicleId = 3;
void RequireLane::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequireLane::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLane.vehicleId)
  return vehicleid_.GetNoArena();
}
void RequireLane::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLane.vehicleId)
}
#if LANG_CXX11
void RequireLane::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLane.vehicleId)
}
#endif
void RequireLane::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLane.vehicleId)
}
void RequireLane::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLane.vehicleId)
}
::std::string* RequireLane::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLane.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequireLane::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLane.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequireLane::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLane.vehicleId)
}

// string signature = 4;
void RequireLane::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequireLane::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLane.signature)
  return signature_.GetNoArena();
}
void RequireLane::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLane.signature)
}
#if LANG_CXX11
void RequireLane::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLane.signature)
}
#endif
void RequireLane::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLane.signature)
}
void RequireLane::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLane.signature)
}
::std::string* RequireLane::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLane.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequireLane::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLane.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequireLane::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLane.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequireLaneResult::kIdFieldNumber;
const int RequireLaneResult::kLinkIdFieldNumber;
const int RequireLaneResult::kVehicleIdFieldNumber;
const int RequireLaneResult::kResultFieldNumber;
const int RequireLaneResult::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequireLaneResult::RequireLaneResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.RequireLaneResult)
}
RequireLaneResult::RequireLaneResult(const RequireLaneResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  linkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.linkid().size() > 0) {
    linkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkid_);
  }
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicleid().size() > 0) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:platoon.communication.RequireLaneResult)
}

void RequireLaneResult::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = false;
  _cached_size_ = 0;
}

RequireLaneResult::~RequireLaneResult() {
  // @@protoc_insertion_point(destructor:platoon.communication.RequireLaneResult)
  SharedDtor();
}

void RequireLaneResult::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequireLaneResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequireLaneResult& RequireLaneResult::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequireLaneResult* RequireLaneResult::New(::google::protobuf::Arena* arena) const {
  RequireLaneResult* n = new RequireLaneResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequireLaneResult::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.RequireLaneResult)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = false;
}

bool RequireLaneResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.RequireLaneResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.RequireLaneResult.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string linkId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->linkid().data(), this->linkid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.RequireLaneResult.linkId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicleId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicleid().data(), this->vehicleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.RequireLaneResult.vehicleId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.RequireLaneResult.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.RequireLaneResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.RequireLaneResult)
  return false;
#undef DO_
}

void RequireLaneResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.RequireLaneResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.RequireLaneResult.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string linkId = 2;
  if (this->linkid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linkid().data(), this->linkid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.RequireLaneResult.linkId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->linkid(), output);
  }

  // string vehicleId = 3;
  if (this->vehicleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicleid().data(), this->vehicleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.RequireLaneResult.vehicleId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vehicleid(), output);
  }

  // bool result = 4;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->result(), output);
  }

  // string signature = 5;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.RequireLaneResult.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.RequireLaneResult)
}

size_t RequireLaneResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.RequireLaneResult)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string linkId = 2;
  if (this->linkid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->linkid());
  }

  // string vehicleId = 3;
  if (this->vehicleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleid());
  }

  // string signature = 5;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // bool result = 4;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequireLaneResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequireLaneResult*>(&from));
}

void RequireLaneResult::MergeFrom(const RequireLaneResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.RequireLaneResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.linkid().size() > 0) {

    linkid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkid_);
  }
  if (from.vehicleid().size() > 0) {

    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RequireLaneResult::CopyFrom(const RequireLaneResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.RequireLaneResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequireLaneResult::IsInitialized() const {
  return true;
}

void RequireLaneResult::Swap(RequireLaneResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequireLaneResult::InternalSwap(RequireLaneResult* other) {
  id_.Swap(&other->id_);
  linkid_.Swap(&other->linkid_);
  vehicleid_.Swap(&other->vehicleid_);
  signature_.Swap(&other->signature_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RequireLaneResult::GetTypeName() const {
  return "platoon.communication.RequireLaneResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequireLaneResult

// string id = 1;
void RequireLaneResult::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequireLaneResult::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.id)
  return id_.GetNoArena();
}
void RequireLaneResult::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.id)
}
#if LANG_CXX11
void RequireLaneResult::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLaneResult.id)
}
#endif
void RequireLaneResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLaneResult.id)
}
void RequireLaneResult::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLaneResult.id)
}
::std::string* RequireLaneResult::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLaneResult.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequireLaneResult::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLaneResult.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequireLaneResult::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLaneResult.id)
}

// string linkId = 2;
void RequireLaneResult::clear_linkid() {
  linkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequireLaneResult::linkid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.linkId)
  return linkid_.GetNoArena();
}
void RequireLaneResult::set_linkid(const ::std::string& value) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.linkId)
}
#if LANG_CXX11
void RequireLaneResult::set_linkid(::std::string&& value) {
  
  linkid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLaneResult.linkId)
}
#endif
void RequireLaneResult::set_linkid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLaneResult.linkId)
}
void RequireLaneResult::set_linkid(const char* value, size_t size) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLaneResult.linkId)
}
::std::string* RequireLaneResult::mutable_linkid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLaneResult.linkId)
  return linkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequireLaneResult::release_linkid() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLaneResult.linkId)
  
  return linkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequireLaneResult::set_allocated_linkid(::std::string* linkid) {
  if (linkid != NULL) {
    
  } else {
    
  }
  linkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLaneResult.linkId)
}

// string vehicleId = 3;
void RequireLaneResult::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequireLaneResult::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.vehicleId)
  return vehicleid_.GetNoArena();
}
void RequireLaneResult::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.vehicleId)
}
#if LANG_CXX11
void RequireLaneResult::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLaneResult.vehicleId)
}
#endif
void RequireLaneResult::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLaneResult.vehicleId)
}
void RequireLaneResult::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLaneResult.vehicleId)
}
::std::string* RequireLaneResult::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLaneResult.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequireLaneResult::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLaneResult.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequireLaneResult::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLaneResult.vehicleId)
}

// bool result = 4;
void RequireLaneResult::clear_result() {
  result_ = false;
}
bool RequireLaneResult::result() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.result)
  return result_;
}
void RequireLaneResult::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.result)
}

// string signature = 5;
void RequireLaneResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RequireLaneResult::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.signature)
  return signature_.GetNoArena();
}
void RequireLaneResult::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.signature)
}
#if LANG_CXX11
void RequireLaneResult::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLaneResult.signature)
}
#endif
void RequireLaneResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLaneResult.signature)
}
void RequireLaneResult::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLaneResult.signature)
}
::std::string* RequireLaneResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLaneResult.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RequireLaneResult::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLaneResult.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequireLaneResult::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLaneResult.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInOutPortMsg::kIdFieldNumber;
const int VehicleInOutPortMsg::kVehicleIdFieldNumber;
const int VehicleInOutPortMsg::kTaskIdFieldNumber;
const int VehicleInOutPortMsg::kActionIdFieldNumber;
const int VehicleInOutPortMsg::kEventTypeFieldNumber;
const int VehicleInOutPortMsg::kPortIdFieldNumber;
const int VehicleInOutPortMsg::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInOutPortMsg::VehicleInOutPortMsg()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.VehicleInOutPortMsg)
}
VehicleInOutPortMsg::VehicleInOutPortMsg(const VehicleInOutPortMsg& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicleid().size() > 0) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&taskid_, &from.taskid_,
    reinterpret_cast<char*>(&portid_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(portid_));
  // @@protoc_insertion_point(copy_constructor:platoon.communication.VehicleInOutPortMsg)
}

void VehicleInOutPortMsg::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&portid_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(portid_));
  _cached_size_ = 0;
}

VehicleInOutPortMsg::~VehicleInOutPortMsg() {
  // @@protoc_insertion_point(destructor:platoon.communication.VehicleInOutPortMsg)
  SharedDtor();
}

void VehicleInOutPortMsg::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleInOutPortMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VehicleInOutPortMsg& VehicleInOutPortMsg::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleInOutPortMsg* VehicleInOutPortMsg::New(::google::protobuf::Arena* arena) const {
  VehicleInOutPortMsg* n = new VehicleInOutPortMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleInOutPortMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.VehicleInOutPortMsg)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&portid_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(portid_));
}

bool VehicleInOutPortMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.VehicleInOutPortMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleInOutPortMsg.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicleId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicleid().data(), this->vehicleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleInOutPortMsg.vehicleId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 taskId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actionId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.VehicleInOutPortMsg.AcrossPort_type eventType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eventtype(static_cast< ::platoon::communication::VehicleInOutPortMsg_AcrossPort_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.Port_Id portId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_portid(static_cast< ::platoon::communication::Port_Id >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleInOutPortMsg.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.VehicleInOutPortMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.VehicleInOutPortMsg)
  return false;
#undef DO_
}

void VehicleInOutPortMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.VehicleInOutPortMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleInOutPortMsg.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicleid().data(), this->vehicleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleInOutPortMsg.vehicleId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicleid(), output);
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->taskid(), output);
  }

  // int32 actionId = 4;
  if (this->actionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actionid(), output);
  }

  // .platoon.communication.VehicleInOutPortMsg.AcrossPort_type eventType = 5;
  if (this->eventtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->eventtype(), output);
  }

  // .platoon.communication.Port_Id portId = 6;
  if (this->portid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->portid(), output);
  }

  // string signature = 7;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleInOutPortMsg.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.VehicleInOutPortMsg)
}

size_t VehicleInOutPortMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.VehicleInOutPortMsg)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleid());
  }

  // string signature = 7;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // int32 taskId = 3;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskid());
  }

  // int32 actionId = 4;
  if (this->actionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionid());
  }

  // .platoon.communication.VehicleInOutPortMsg.AcrossPort_type eventType = 5;
  if (this->eventtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
  }

  // .platoon.communication.Port_Id portId = 6;
  if (this->portid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->portid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleInOutPortMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VehicleInOutPortMsg*>(&from));
}

void VehicleInOutPortMsg::MergeFrom(const VehicleInOutPortMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.VehicleInOutPortMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.vehicleid().size() > 0) {

    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.taskid() != 0) {
    set_taskid(from.taskid());
  }
  if (from.actionid() != 0) {
    set_actionid(from.actionid());
  }
  if (from.eventtype() != 0) {
    set_eventtype(from.eventtype());
  }
  if (from.portid() != 0) {
    set_portid(from.portid());
  }
}

void VehicleInOutPortMsg::CopyFrom(const VehicleInOutPortMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.VehicleInOutPortMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInOutPortMsg::IsInitialized() const {
  return true;
}

void VehicleInOutPortMsg::Swap(VehicleInOutPortMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInOutPortMsg::InternalSwap(VehicleInOutPortMsg* other) {
  id_.Swap(&other->id_);
  vehicleid_.Swap(&other->vehicleid_);
  signature_.Swap(&other->signature_);
  std::swap(taskid_, other->taskid_);
  std::swap(actionid_, other->actionid_);
  std::swap(eventtype_, other->eventtype_);
  std::swap(portid_, other->portid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VehicleInOutPortMsg::GetTypeName() const {
  return "platoon.communication.VehicleInOutPortMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleInOutPortMsg

// string id = 1;
void VehicleInOutPortMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleInOutPortMsg::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.id)
  return id_.GetNoArena();
}
void VehicleInOutPortMsg::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.id)
}
#if LANG_CXX11
void VehicleInOutPortMsg::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleInOutPortMsg.id)
}
#endif
void VehicleInOutPortMsg::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleInOutPortMsg.id)
}
void VehicleInOutPortMsg::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleInOutPortMsg.id)
}
::std::string* VehicleInOutPortMsg::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleInOutPortMsg.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleInOutPortMsg::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleInOutPortMsg.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleInOutPortMsg::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleInOutPortMsg.id)
}

// string vehicleId = 2;
void VehicleInOutPortMsg::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleInOutPortMsg::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.vehicleId)
  return vehicleid_.GetNoArena();
}
void VehicleInOutPortMsg::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.vehicleId)
}
#if LANG_CXX11
void VehicleInOutPortMsg::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleInOutPortMsg.vehicleId)
}
#endif
void VehicleInOutPortMsg::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleInOutPortMsg.vehicleId)
}
void VehicleInOutPortMsg::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleInOutPortMsg.vehicleId)
}
::std::string* VehicleInOutPortMsg::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleInOutPortMsg.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleInOutPortMsg::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleInOutPortMsg.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleInOutPortMsg::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleInOutPortMsg.vehicleId)
}

// int32 taskId = 3;
void VehicleInOutPortMsg::clear_taskid() {
  taskid_ = 0;
}
::google::protobuf::int32 VehicleInOutPortMsg::taskid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.taskId)
  return taskid_;
}
void VehicleInOutPortMsg::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.taskId)
}

// int32 actionId = 4;
void VehicleInOutPortMsg::clear_actionid() {
  actionid_ = 0;
}
::google::protobuf::int32 VehicleInOutPortMsg::actionid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.actionId)
  return actionid_;
}
void VehicleInOutPortMsg::set_actionid(::google::protobuf::int32 value) {
  
  actionid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.actionId)
}

// .platoon.communication.VehicleInOutPortMsg.AcrossPort_type eventType = 5;
void VehicleInOutPortMsg::clear_eventtype() {
  eventtype_ = 0;
}
::platoon::communication::VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::eventtype() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.eventType)
  return static_cast< ::platoon::communication::VehicleInOutPortMsg_AcrossPort_type >(eventtype_);
}
void VehicleInOutPortMsg::set_eventtype(::platoon::communication::VehicleInOutPortMsg_AcrossPort_type value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.eventType)
}

// .platoon.communication.Port_Id portId = 6;
void VehicleInOutPortMsg::clear_portid() {
  portid_ = 0;
}
::platoon::communication::Port_Id VehicleInOutPortMsg::portid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.portId)
  return static_cast< ::platoon::communication::Port_Id >(portid_);
}
void VehicleInOutPortMsg::set_portid(::platoon::communication::Port_Id value) {
  
  portid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.portId)
}

// string signature = 7;
void VehicleInOutPortMsg::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleInOutPortMsg::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.signature)
  return signature_.GetNoArena();
}
void VehicleInOutPortMsg::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.signature)
}
#if LANG_CXX11
void VehicleInOutPortMsg::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleInOutPortMsg.signature)
}
#endif
void VehicleInOutPortMsg::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleInOutPortMsg.signature)
}
void VehicleInOutPortMsg::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleInOutPortMsg.signature)
}
::std::string* VehicleInOutPortMsg::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleInOutPortMsg.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleInOutPortMsg::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleInOutPortMsg.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleInOutPortMsg::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleInOutPortMsg.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperationReceivedMsg::kIdFieldNumber;
const int OperationReceivedMsg::kCoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperationReceivedMsg::OperationReceivedMsg()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.OperationReceivedMsg)
}
OperationReceivedMsg::OperationReceivedMsg(const OperationReceivedMsg& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  coid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.coid().size() > 0) {
    coid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coid_);
  }
  // @@protoc_insertion_point(copy_constructor:platoon.communication.OperationReceivedMsg)
}

void OperationReceivedMsg::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OperationReceivedMsg::~OperationReceivedMsg() {
  // @@protoc_insertion_point(destructor:platoon.communication.OperationReceivedMsg)
  SharedDtor();
}

void OperationReceivedMsg::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OperationReceivedMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OperationReceivedMsg& OperationReceivedMsg::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperationReceivedMsg* OperationReceivedMsg::New(::google::protobuf::Arena* arena) const {
  OperationReceivedMsg* n = new OperationReceivedMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperationReceivedMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.OperationReceivedMsg)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OperationReceivedMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.OperationReceivedMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.OperationReceivedMsg.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string coId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->coid().data(), this->coid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.OperationReceivedMsg.coId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.OperationReceivedMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.OperationReceivedMsg)
  return false;
#undef DO_
}

void OperationReceivedMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.OperationReceivedMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.OperationReceivedMsg.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string coId = 2;
  if (this->coid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coid().data(), this->coid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.OperationReceivedMsg.coId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->coid(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.OperationReceivedMsg)
}

size_t OperationReceivedMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.OperationReceivedMsg)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string coId = 2;
  if (this->coid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationReceivedMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OperationReceivedMsg*>(&from));
}

void OperationReceivedMsg::MergeFrom(const OperationReceivedMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.OperationReceivedMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.coid().size() > 0) {

    coid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coid_);
  }
}

void OperationReceivedMsg::CopyFrom(const OperationReceivedMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.OperationReceivedMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationReceivedMsg::IsInitialized() const {
  return true;
}

void OperationReceivedMsg::Swap(OperationReceivedMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperationReceivedMsg::InternalSwap(OperationReceivedMsg* other) {
  id_.Swap(&other->id_);
  coid_.Swap(&other->coid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OperationReceivedMsg::GetTypeName() const {
  return "platoon.communication.OperationReceivedMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperationReceivedMsg

// string id = 1;
void OperationReceivedMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OperationReceivedMsg::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.OperationReceivedMsg.id)
  return id_.GetNoArena();
}
void OperationReceivedMsg::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.OperationReceivedMsg.id)
}
#if LANG_CXX11
void OperationReceivedMsg::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.OperationReceivedMsg.id)
}
#endif
void OperationReceivedMsg::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.OperationReceivedMsg.id)
}
void OperationReceivedMsg::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.OperationReceivedMsg.id)
}
::std::string* OperationReceivedMsg::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.OperationReceivedMsg.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationReceivedMsg::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.OperationReceivedMsg.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationReceivedMsg::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.OperationReceivedMsg.id)
}

// string coId = 2;
void OperationReceivedMsg::clear_coid() {
  coid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OperationReceivedMsg::coid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.OperationReceivedMsg.coId)
  return coid_.GetNoArena();
}
void OperationReceivedMsg::set_coid(const ::std::string& value) {
  
  coid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.OperationReceivedMsg.coId)
}
#if LANG_CXX11
void OperationReceivedMsg::set_coid(::std::string&& value) {
  
  coid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.OperationReceivedMsg.coId)
}
#endif
void OperationReceivedMsg::set_coid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.OperationReceivedMsg.coId)
}
void OperationReceivedMsg::set_coid(const char* value, size_t size) {
  
  coid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.OperationReceivedMsg.coId)
}
::std::string* OperationReceivedMsg::mutable_coid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.OperationReceivedMsg.coId)
  return coid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperationReceivedMsg::release_coid() {
  // @@protoc_insertion_point(field_release:platoon.communication.OperationReceivedMsg.coId)
  
  return coid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperationReceivedMsg::set_allocated_coid(::std::string* coid) {
  if (coid != NULL) {
    
  } else {
    
  }
  coid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.OperationReceivedMsg.coId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fleet_node::kPosXFieldNumber;
const int Fleet_node::kPosYFieldNumber;
const int Fleet_node::kNodeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fleet_node::Fleet_node()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.Fleet_node)
}
Fleet_node::Fleet_node(const Fleet_node& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posx_, &from.posx_,
    reinterpret_cast<char*>(&nodetype_) -
    reinterpret_cast<char*>(&posx_) + sizeof(nodetype_));
  // @@protoc_insertion_point(copy_constructor:platoon.communication.Fleet_node)
}

void Fleet_node::SharedCtor() {
  ::memset(&posx_, 0, reinterpret_cast<char*>(&nodetype_) -
    reinterpret_cast<char*>(&posx_) + sizeof(nodetype_));
  _cached_size_ = 0;
}

Fleet_node::~Fleet_node() {
  // @@protoc_insertion_point(destructor:platoon.communication.Fleet_node)
  SharedDtor();
}

void Fleet_node::SharedDtor() {
}

void Fleet_node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Fleet_node& Fleet_node::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Fleet_node* Fleet_node::New(::google::protobuf::Arena* arena) const {
  Fleet_node* n = new Fleet_node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fleet_node::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.Fleet_node)
  ::memset(&posx_, 0, reinterpret_cast<char*>(&nodetype_) -
    reinterpret_cast<char*>(&posx_) + sizeof(nodetype_));
}

bool Fleet_node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.Fleet_node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double posX = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double posY = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.Fleet_node.NodeType nodeType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nodetype(static_cast< ::platoon::communication::Fleet_node_NodeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.Fleet_node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.Fleet_node)
  return false;
#undef DO_
}

void Fleet_node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.Fleet_node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double posX = 1;
  if (this->posx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->posx(), output);
  }

  // double posY = 2;
  if (this->posy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->posy(), output);
  }

  // .platoon.communication.Fleet_node.NodeType nodeType = 3;
  if (this->nodetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nodetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.Fleet_node)
}

size_t Fleet_node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.Fleet_node)
  size_t total_size = 0;

  // double posX = 1;
  if (this->posx() != 0) {
    total_size += 1 + 8;
  }

  // double posY = 2;
  if (this->posy() != 0) {
    total_size += 1 + 8;
  }

  // .platoon.communication.Fleet_node.NodeType nodeType = 3;
  if (this->nodetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nodetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fleet_node::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Fleet_node*>(&from));
}

void Fleet_node::MergeFrom(const Fleet_node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.Fleet_node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.posx() != 0) {
    set_posx(from.posx());
  }
  if (from.posy() != 0) {
    set_posy(from.posy());
  }
  if (from.nodetype() != 0) {
    set_nodetype(from.nodetype());
  }
}

void Fleet_node::CopyFrom(const Fleet_node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.Fleet_node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fleet_node::IsInitialized() const {
  return true;
}

void Fleet_node::Swap(Fleet_node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fleet_node::InternalSwap(Fleet_node* other) {
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(nodetype_, other->nodetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Fleet_node::GetTypeName() const {
  return "platoon.communication.Fleet_node";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Fleet_node

// double posX = 1;
void Fleet_node::clear_posx() {
  posx_ = 0;
}
double Fleet_node::posx() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Fleet_node.posX)
  return posx_;
}
void Fleet_node::set_posx(double value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Fleet_node.posX)
}

// double posY = 2;
void Fleet_node::clear_posy() {
  posy_ = 0;
}
double Fleet_node::posy() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Fleet_node.posY)
  return posy_;
}
void Fleet_node::set_posy(double value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Fleet_node.posY)
}

// .platoon.communication.Fleet_node.NodeType nodeType = 3;
void Fleet_node::clear_nodetype() {
  nodetype_ = 0;
}
::platoon::communication::Fleet_node_NodeType Fleet_node::nodetype() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Fleet_node.nodeType)
  return static_cast< ::platoon::communication::Fleet_node_NodeType >(nodetype_);
}
void Fleet_node::set_nodetype(::platoon::communication::Fleet_node_NodeType value) {
  
  nodetype_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Fleet_node.nodeType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleFleetOperation::kIdFieldNumber;
const int VehicleFleetOperation::kVehicleIdFieldNumber;
const int VehicleFleetOperation::kPlatoonMemberFieldNumber;
const int VehicleFleetOperation::kPlatoonNumberFieldNumber;
const int VehicleFleetOperation::kStartTimeFieldNumber;
const int VehicleFleetOperation::kStartNodeFieldNumber;
const int VehicleFleetOperation::kEndNodeFieldNumber;
const int VehicleFleetOperation::kSrcPortFieldNumber;
const int VehicleFleetOperation::kDstPortFieldNumber;
const int VehicleFleetOperation::kSignatureFieldNumber;
const int VehicleFleetOperation::kSafeDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleFleetOperation::VehicleFleetOperation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.VehicleFleetOperation)
}
VehicleFleetOperation::VehicleFleetOperation(const VehicleFleetOperation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      platoonmember_(from.platoonmember_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicleid().size() > 0) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_starttime()) {
    starttime_ = new ::google::protobuf::Timestamp(*from.starttime_);
  } else {
    starttime_ = NULL;
  }
  if (from.has_startnode()) {
    startnode_ = new ::platoon::communication::Fleet_node(*from.startnode_);
  } else {
    startnode_ = NULL;
  }
  if (from.has_endnode()) {
    endnode_ = new ::platoon::communication::Fleet_node(*from.endnode_);
  } else {
    endnode_ = NULL;
  }
  ::memcpy(&platoonnumber_, &from.platoonnumber_,
    reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&platoonnumber_) + sizeof(dstport_));
  // @@protoc_insertion_point(copy_constructor:platoon.communication.VehicleFleetOperation)
}

void VehicleFleetOperation::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&starttime_) + sizeof(dstport_));
  _cached_size_ = 0;
}

VehicleFleetOperation::~VehicleFleetOperation() {
  // @@protoc_insertion_point(destructor:platoon.communication.VehicleFleetOperation)
  SharedDtor();
}

void VehicleFleetOperation::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete starttime_;
  }
  if (this != internal_default_instance()) {
    delete startnode_;
  }
  if (this != internal_default_instance()) {
    delete endnode_;
  }
}

void VehicleFleetOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VehicleFleetOperation& VehicleFleetOperation::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleFleetOperation* VehicleFleetOperation::New(::google::protobuf::Arena* arena) const {
  VehicleFleetOperation* n = new VehicleFleetOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleFleetOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.VehicleFleetOperation)
  platoonmember_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && starttime_ != NULL) {
    delete starttime_;
  }
  starttime_ = NULL;
  if (GetArenaNoVirtual() == NULL && startnode_ != NULL) {
    delete startnode_;
  }
  startnode_ = NULL;
  if (GetArenaNoVirtual() == NULL && endnode_ != NULL) {
    delete endnode_;
  }
  endnode_ = NULL;
  ::memset(&platoonnumber_, 0, reinterpret_cast<char*>(&dstport_) -
    reinterpret_cast<char*>(&platoonnumber_) + sizeof(dstport_));
}

bool VehicleFleetOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.VehicleFleetOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleFleetOperation.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicleId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicleid().data(), this->vehicleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleFleetOperation.vehicleId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string platoonMember = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_platoonmember()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->platoonmember(this->platoonmember_size() - 1).data(),
            this->platoonmember(this->platoonmember_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleFleetOperation.platoonMember"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 platoonNumber = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platoonnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp startTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.Fleet_node startNode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.Fleet_node endNode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endnode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.Port_Id srcPort = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_srcport(static_cast< ::platoon::communication::Port_Id >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.Port_Id dstPort = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dstport(static_cast< ::platoon::communication::Port_Id >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleFleetOperation.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double safe_distance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safe_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.VehicleFleetOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.VehicleFleetOperation)
  return false;
#undef DO_
}

void VehicleFleetOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.VehicleFleetOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleFleetOperation.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicleid().data(), this->vehicleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleFleetOperation.vehicleId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicleid(), output);
  }

  // repeated string platoonMember = 3;
  for (int i = 0, n = this->platoonmember_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platoonmember(i).data(), this->platoonmember(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleFleetOperation.platoonMember");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->platoonmember(i), output);
  }

  // int32 platoonNumber = 4;
  if (this->platoonnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platoonnumber(), output);
  }

  // .google.protobuf.Timestamp startTime = 5;
  if (this->has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->starttime_, output);
  }

  // .platoon.communication.Fleet_node startNode = 6;
  if (this->has_startnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->startnode_, output);
  }

  // .platoon.communication.Fleet_node endNode = 7;
  if (this->has_endnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->endnode_, output);
  }

  // .platoon.communication.Port_Id srcPort = 8;
  if (this->srcport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->srcport(), output);
  }

  // .platoon.communication.Port_Id dstPort = 9;
  if (this->dstport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->dstport(), output);
  }

  // string signature = 10;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleFleetOperation.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->signature(), output);
  }

  // double safe_distance = 11;
  if (this->safe_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->safe_distance(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.VehicleFleetOperation)
}

size_t VehicleFleetOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.VehicleFleetOperation)
  size_t total_size = 0;

  // repeated string platoonMember = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->platoonmember_size());
  for (int i = 0, n = this->platoonmember_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->platoonmember(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleid());
  }

  // string signature = 10;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // .google.protobuf.Timestamp startTime = 5;
  if (this->has_starttime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->starttime_);
  }

  // .platoon.communication.Fleet_node startNode = 6;
  if (this->has_startnode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->startnode_);
  }

  // .platoon.communication.Fleet_node endNode = 7;
  if (this->has_endnode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->endnode_);
  }

  // int32 platoonNumber = 4;
  if (this->platoonnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->platoonnumber());
  }

  // .platoon.communication.Port_Id srcPort = 8;
  if (this->srcport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->srcport());
  }

  // double safe_distance = 11;
  if (this->safe_distance() != 0) {
    total_size += 1 + 8;
  }

  // .platoon.communication.Port_Id dstPort = 9;
  if (this->dstport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dstport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleFleetOperation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VehicleFleetOperation*>(&from));
}

void VehicleFleetOperation::MergeFrom(const VehicleFleetOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.VehicleFleetOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  platoonmember_.MergeFrom(from.platoonmember_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.vehicleid().size() > 0) {

    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_starttime()) {
    mutable_starttime()->::google::protobuf::Timestamp::MergeFrom(from.starttime());
  }
  if (from.has_startnode()) {
    mutable_startnode()->::platoon::communication::Fleet_node::MergeFrom(from.startnode());
  }
  if (from.has_endnode()) {
    mutable_endnode()->::platoon::communication::Fleet_node::MergeFrom(from.endnode());
  }
  if (from.platoonnumber() != 0) {
    set_platoonnumber(from.platoonnumber());
  }
  if (from.srcport() != 0) {
    set_srcport(from.srcport());
  }
  if (from.safe_distance() != 0) {
    set_safe_distance(from.safe_distance());
  }
  if (from.dstport() != 0) {
    set_dstport(from.dstport());
  }
}

void VehicleFleetOperation::CopyFrom(const VehicleFleetOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.VehicleFleetOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleFleetOperation::IsInitialized() const {
  return true;
}

void VehicleFleetOperation::Swap(VehicleFleetOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleFleetOperation::InternalSwap(VehicleFleetOperation* other) {
  platoonmember_.InternalSwap(&other->platoonmember_);
  id_.Swap(&other->id_);
  vehicleid_.Swap(&other->vehicleid_);
  signature_.Swap(&other->signature_);
  std::swap(starttime_, other->starttime_);
  std::swap(startnode_, other->startnode_);
  std::swap(endnode_, other->endnode_);
  std::swap(platoonnumber_, other->platoonnumber_);
  std::swap(srcport_, other->srcport_);
  std::swap(safe_distance_, other->safe_distance_);
  std::swap(dstport_, other->dstport_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VehicleFleetOperation::GetTypeName() const {
  return "platoon.communication.VehicleFleetOperation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleFleetOperation

// string id = 1;
void VehicleFleetOperation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleFleetOperation::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.id)
  return id_.GetNoArena();
}
void VehicleFleetOperation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.id)
}
#if LANG_CXX11
void VehicleFleetOperation::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetOperation.id)
}
#endif
void VehicleFleetOperation::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetOperation.id)
}
void VehicleFleetOperation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetOperation.id)
}
::std::string* VehicleFleetOperation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleFleetOperation::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleFleetOperation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.id)
}

// string vehicleId = 2;
void VehicleFleetOperation::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleFleetOperation::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.vehicleId)
  return vehicleid_.GetNoArena();
}
void VehicleFleetOperation::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.vehicleId)
}
#if LANG_CXX11
void VehicleFleetOperation::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetOperation.vehicleId)
}
#endif
void VehicleFleetOperation::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetOperation.vehicleId)
}
void VehicleFleetOperation::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetOperation.vehicleId)
}
::std::string* VehicleFleetOperation::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleFleetOperation::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleFleetOperation::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.vehicleId)
}

// repeated string platoonMember = 3;
int VehicleFleetOperation::platoonmember_size() const {
  return platoonmember_.size();
}
void VehicleFleetOperation::clear_platoonmember() {
  platoonmember_.Clear();
}
const ::std::string& VehicleFleetOperation::platoonmember(int index) const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.platoonMember)
  return platoonmember_.Get(index);
}
::std::string* VehicleFleetOperation::mutable_platoonmember(int index) {
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.platoonMember)
  return platoonmember_.Mutable(index);
}
void VehicleFleetOperation::set_platoonmember(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.platoonMember)
  platoonmember_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VehicleFleetOperation::set_platoonmember(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.platoonMember)
  platoonmember_.Mutable(index)->assign(std::move(value));
}
#endif
void VehicleFleetOperation::set_platoonmember(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  platoonmember_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetOperation.platoonMember)
}
void VehicleFleetOperation::set_platoonmember(int index, const char* value, size_t size) {
  platoonmember_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetOperation.platoonMember)
}
::std::string* VehicleFleetOperation::add_platoonmember() {
  // @@protoc_insertion_point(field_add_mutable:platoon.communication.VehicleFleetOperation.platoonMember)
  return platoonmember_.Add();
}
void VehicleFleetOperation::add_platoonmember(const ::std::string& value) {
  platoonmember_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:platoon.communication.VehicleFleetOperation.platoonMember)
}
#if LANG_CXX11
void VehicleFleetOperation::add_platoonmember(::std::string&& value) {
  platoonmember_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:platoon.communication.VehicleFleetOperation.platoonMember)
}
#endif
void VehicleFleetOperation::add_platoonmember(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  platoonmember_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:platoon.communication.VehicleFleetOperation.platoonMember)
}
void VehicleFleetOperation::add_platoonmember(const char* value, size_t size) {
  platoonmember_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:platoon.communication.VehicleFleetOperation.platoonMember)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VehicleFleetOperation::platoonmember() const {
  // @@protoc_insertion_point(field_list:platoon.communication.VehicleFleetOperation.platoonMember)
  return platoonmember_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VehicleFleetOperation::mutable_platoonmember() {
  // @@protoc_insertion_point(field_mutable_list:platoon.communication.VehicleFleetOperation.platoonMember)
  return &platoonmember_;
}

// int32 platoonNumber = 4;
void VehicleFleetOperation::clear_platoonnumber() {
  platoonnumber_ = 0;
}
::google::protobuf::int32 VehicleFleetOperation::platoonnumber() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.platoonNumber)
  return platoonnumber_;
}
void VehicleFleetOperation::set_platoonnumber(::google::protobuf::int32 value) {
  
  platoonnumber_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.platoonNumber)
}

// .google.protobuf.Timestamp startTime = 5;
bool VehicleFleetOperation::has_starttime() const {
  return this != internal_default_instance() && starttime_ != NULL;
}
void VehicleFleetOperation::clear_starttime() {
  if (GetArenaNoVirtual() == NULL && starttime_ != NULL) delete starttime_;
  starttime_ = NULL;
}
const ::google::protobuf::Timestamp& VehicleFleetOperation::starttime() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.startTime)
  return starttime_ != NULL ? *starttime_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* VehicleFleetOperation::mutable_starttime() {
  
  if (starttime_ == NULL) {
    starttime_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.startTime)
  return starttime_;
}
::google::protobuf::Timestamp* VehicleFleetOperation::release_starttime() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.startTime)
  
  ::google::protobuf::Timestamp* temp = starttime_;
  starttime_ = NULL;
  return temp;
}
void VehicleFleetOperation::set_allocated_starttime(::google::protobuf::Timestamp* starttime) {
  delete starttime_;
  if (starttime != NULL && starttime->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_starttime = new ::google::protobuf::Timestamp;
    new_starttime->CopyFrom(*starttime);
    starttime = new_starttime;
  }
  starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.startTime)
}

// .platoon.communication.Fleet_node startNode = 6;
bool VehicleFleetOperation::has_startnode() const {
  return this != internal_default_instance() && startnode_ != NULL;
}
void VehicleFleetOperation::clear_startnode() {
  if (GetArenaNoVirtual() == NULL && startnode_ != NULL) delete startnode_;
  startnode_ = NULL;
}
const ::platoon::communication::Fleet_node& VehicleFleetOperation::startnode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.startNode)
  return startnode_ != NULL ? *startnode_
                         : *::platoon::communication::Fleet_node::internal_default_instance();
}
::platoon::communication::Fleet_node* VehicleFleetOperation::mutable_startnode() {
  
  if (startnode_ == NULL) {
    startnode_ = new ::platoon::communication::Fleet_node;
  }
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.startNode)
  return startnode_;
}
::platoon::communication::Fleet_node* VehicleFleetOperation::release_startnode() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.startNode)
  
  ::platoon::communication::Fleet_node* temp = startnode_;
  startnode_ = NULL;
  return temp;
}
void VehicleFleetOperation::set_allocated_startnode(::platoon::communication::Fleet_node* startnode) {
  delete startnode_;
  startnode_ = startnode;
  if (startnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.startNode)
}

// .platoon.communication.Fleet_node endNode = 7;
bool VehicleFleetOperation::has_endnode() const {
  return this != internal_default_instance() && endnode_ != NULL;
}
void VehicleFleetOperation::clear_endnode() {
  if (GetArenaNoVirtual() == NULL && endnode_ != NULL) delete endnode_;
  endnode_ = NULL;
}
const ::platoon::communication::Fleet_node& VehicleFleetOperation::endnode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.endNode)
  return endnode_ != NULL ? *endnode_
                         : *::platoon::communication::Fleet_node::internal_default_instance();
}
::platoon::communication::Fleet_node* VehicleFleetOperation::mutable_endnode() {
  
  if (endnode_ == NULL) {
    endnode_ = new ::platoon::communication::Fleet_node;
  }
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.endNode)
  return endnode_;
}
::platoon::communication::Fleet_node* VehicleFleetOperation::release_endnode() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.endNode)
  
  ::platoon::communication::Fleet_node* temp = endnode_;
  endnode_ = NULL;
  return temp;
}
void VehicleFleetOperation::set_allocated_endnode(::platoon::communication::Fleet_node* endnode) {
  delete endnode_;
  endnode_ = endnode;
  if (endnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.endNode)
}

// .platoon.communication.Port_Id srcPort = 8;
void VehicleFleetOperation::clear_srcport() {
  srcport_ = 0;
}
::platoon::communication::Port_Id VehicleFleetOperation::srcport() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.srcPort)
  return static_cast< ::platoon::communication::Port_Id >(srcport_);
}
void VehicleFleetOperation::set_srcport(::platoon::communication::Port_Id value) {
  
  srcport_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.srcPort)
}

// .platoon.communication.Port_Id dstPort = 9;
void VehicleFleetOperation::clear_dstport() {
  dstport_ = 0;
}
::platoon::communication::Port_Id VehicleFleetOperation::dstport() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.dstPort)
  return static_cast< ::platoon::communication::Port_Id >(dstport_);
}
void VehicleFleetOperation::set_dstport(::platoon::communication::Port_Id value) {
  
  dstport_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.dstPort)
}

// string signature = 10;
void VehicleFleetOperation::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleFleetOperation::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.signature)
  return signature_.GetNoArena();
}
void VehicleFleetOperation::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.signature)
}
#if LANG_CXX11
void VehicleFleetOperation::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetOperation.signature)
}
#endif
void VehicleFleetOperation::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetOperation.signature)
}
void VehicleFleetOperation::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetOperation.signature)
}
::std::string* VehicleFleetOperation::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleFleetOperation::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleFleetOperation::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.signature)
}

// double safe_distance = 11;
void VehicleFleetOperation::clear_safe_distance() {
  safe_distance_ = 0;
}
double VehicleFleetOperation::safe_distance() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.safe_distance)
  return safe_distance_;
}
void VehicleFleetOperation::set_safe_distance(double value) {
  
  safe_distance_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.safe_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleFleetResult::kIdFieldNumber;
const int VehicleFleetResult::kVehicleIdFieldNumber;
const int VehicleFleetResult::kPlatoonNumberFieldNumber;
const int VehicleFleetResult::kApplyInfoFieldNumber;
const int VehicleFleetResult::kApplyResultFieldNumber;
const int VehicleFleetResult::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleFleetResult::VehicleFleetResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.VehicleFleetResult)
}
VehicleFleetResult::VehicleFleetResult(const VehicleFleetResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicleid().size() > 0) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&platoonnumber_, &from.platoonnumber_,
    reinterpret_cast<char*>(&applyresult_) -
    reinterpret_cast<char*>(&platoonnumber_) + sizeof(applyresult_));
  // @@protoc_insertion_point(copy_constructor:platoon.communication.VehicleFleetResult)
}

void VehicleFleetResult::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&platoonnumber_, 0, reinterpret_cast<char*>(&applyresult_) -
    reinterpret_cast<char*>(&platoonnumber_) + sizeof(applyresult_));
  _cached_size_ = 0;
}

VehicleFleetResult::~VehicleFleetResult() {
  // @@protoc_insertion_point(destructor:platoon.communication.VehicleFleetResult)
  SharedDtor();
}

void VehicleFleetResult::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleFleetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VehicleFleetResult& VehicleFleetResult::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleFleetResult* VehicleFleetResult::New(::google::protobuf::Arena* arena) const {
  VehicleFleetResult* n = new VehicleFleetResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleFleetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.VehicleFleetResult)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&platoonnumber_, 0, reinterpret_cast<char*>(&applyresult_) -
    reinterpret_cast<char*>(&platoonnumber_) + sizeof(applyresult_));
}

bool VehicleFleetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.VehicleFleetResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleFleetResult.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicleId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicleid().data(), this->vehicleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleFleetResult.vehicleId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 platoonNumber = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platoonnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.FleetApplyType applyInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applyinfo(static_cast< ::platoon::communication::FleetApplyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool applyResult = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &applyresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleFleetResult.signature"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.VehicleFleetResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.VehicleFleetResult)
  return false;
#undef DO_
}

void VehicleFleetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.VehicleFleetResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleFleetResult.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicleid().data(), this->vehicleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleFleetResult.vehicleId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicleid(), output);
  }

  // int32 platoonNumber = 4;
  if (this->platoonnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->platoonnumber(), output);
  }

  // .platoon.communication.FleetApplyType applyInfo = 5;
  if (this->applyinfo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->applyinfo(), output);
  }

  // bool applyResult = 7;
  if (this->applyresult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->applyresult(), output);
  }

  // string signature = 10;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleFleetResult.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.VehicleFleetResult)
}

size_t VehicleFleetResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.VehicleFleetResult)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string vehicleId = 2;
  if (this->vehicleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleid());
  }

  // string signature = 10;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  // int32 platoonNumber = 4;
  if (this->platoonnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->platoonnumber());
  }

  // .platoon.communication.FleetApplyType applyInfo = 5;
  if (this->applyinfo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applyinfo());
  }

  // bool applyResult = 7;
  if (this->applyresult() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleFleetResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VehicleFleetResult*>(&from));
}

void VehicleFleetResult::MergeFrom(const VehicleFleetResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.VehicleFleetResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.vehicleid().size() > 0) {

    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.platoonnumber() != 0) {
    set_platoonnumber(from.platoonnumber());
  }
  if (from.applyinfo() != 0) {
    set_applyinfo(from.applyinfo());
  }
  if (from.applyresult() != 0) {
    set_applyresult(from.applyresult());
  }
}

void VehicleFleetResult::CopyFrom(const VehicleFleetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.VehicleFleetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleFleetResult::IsInitialized() const {
  return true;
}

void VehicleFleetResult::Swap(VehicleFleetResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleFleetResult::InternalSwap(VehicleFleetResult* other) {
  id_.Swap(&other->id_);
  vehicleid_.Swap(&other->vehicleid_);
  signature_.Swap(&other->signature_);
  std::swap(platoonnumber_, other->platoonnumber_);
  std::swap(applyinfo_, other->applyinfo_);
  std::swap(applyresult_, other->applyresult_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VehicleFleetResult::GetTypeName() const {
  return "platoon.communication.VehicleFleetResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleFleetResult

// string id = 1;
void VehicleFleetResult::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleFleetResult::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.id)
  return id_.GetNoArena();
}
void VehicleFleetResult::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.id)
}
#if LANG_CXX11
void VehicleFleetResult::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetResult.id)
}
#endif
void VehicleFleetResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetResult.id)
}
void VehicleFleetResult::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetResult.id)
}
::std::string* VehicleFleetResult::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetResult.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleFleetResult::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetResult.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleFleetResult::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetResult.id)
}

// string vehicleId = 2;
void VehicleFleetResult::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleFleetResult::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.vehicleId)
  return vehicleid_.GetNoArena();
}
void VehicleFleetResult::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.vehicleId)
}
#if LANG_CXX11
void VehicleFleetResult::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetResult.vehicleId)
}
#endif
void VehicleFleetResult::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetResult.vehicleId)
}
void VehicleFleetResult::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetResult.vehicleId)
}
::std::string* VehicleFleetResult::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetResult.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleFleetResult::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetResult.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleFleetResult::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetResult.vehicleId)
}

// int32 platoonNumber = 4;
void VehicleFleetResult::clear_platoonnumber() {
  platoonnumber_ = 0;
}
::google::protobuf::int32 VehicleFleetResult::platoonnumber() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.platoonNumber)
  return platoonnumber_;
}
void VehicleFleetResult::set_platoonnumber(::google::protobuf::int32 value) {
  
  platoonnumber_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.platoonNumber)
}

// .platoon.communication.FleetApplyType applyInfo = 5;
void VehicleFleetResult::clear_applyinfo() {
  applyinfo_ = 0;
}
::platoon::communication::FleetApplyType VehicleFleetResult::applyinfo() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.applyInfo)
  return static_cast< ::platoon::communication::FleetApplyType >(applyinfo_);
}
void VehicleFleetResult::set_applyinfo(::platoon::communication::FleetApplyType value) {
  
  applyinfo_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.applyInfo)
}

// bool applyResult = 7;
void VehicleFleetResult::clear_applyresult() {
  applyresult_ = false;
}
bool VehicleFleetResult::applyresult() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.applyResult)
  return applyresult_;
}
void VehicleFleetResult::set_applyresult(bool value) {
  
  applyresult_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.applyResult)
}

// string signature = 10;
void VehicleFleetResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleFleetResult::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.signature)
  return signature_.GetNoArena();
}
void VehicleFleetResult::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.signature)
}
#if LANG_CXX11
void VehicleFleetResult::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetResult.signature)
}
#endif
void VehicleFleetResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetResult.signature)
}
void VehicleFleetResult::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetResult.signature)
}
::std::string* VehicleFleetResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetResult.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleFleetResult::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetResult.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleFleetResult::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetResult.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleFleetInfo::kApplyInfoFieldNumber;
const int VehicleFleetInfo::kActualDriveModeFieldNumber;
const int VehicleFleetInfo::kPlatoonNumberFieldNumber;
const int VehicleFleetInfo::kVehicleSquenceFieldNumber;
const int VehicleFleetInfo::kVehicleIdFieldNumber;
const int VehicleFleetInfo::kFmsMessageIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleFleetInfo::VehicleFleetInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DataMessageProto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:platoon.communication.VehicleFleetInfo)
}
VehicleFleetInfo::VehicleFleetInfo(const VehicleFleetInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicleid().size() > 0) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  fmsmessageid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fmsmessageid().size() > 0) {
    fmsmessageid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fmsmessageid_);
  }
  ::memcpy(&applyinfo_, &from.applyinfo_,
    reinterpret_cast<char*>(&vehiclesquence_) -
    reinterpret_cast<char*>(&applyinfo_) + sizeof(vehiclesquence_));
  // @@protoc_insertion_point(copy_constructor:platoon.communication.VehicleFleetInfo)
}

void VehicleFleetInfo::SharedCtor() {
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fmsmessageid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&applyinfo_, 0, reinterpret_cast<char*>(&vehiclesquence_) -
    reinterpret_cast<char*>(&applyinfo_) + sizeof(vehiclesquence_));
  _cached_size_ = 0;
}

VehicleFleetInfo::~VehicleFleetInfo() {
  // @@protoc_insertion_point(destructor:platoon.communication.VehicleFleetInfo)
  SharedDtor();
}

void VehicleFleetInfo::SharedDtor() {
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fmsmessageid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleFleetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VehicleFleetInfo& VehicleFleetInfo::default_instance() {
  protobuf_DataMessageProto_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleFleetInfo* VehicleFleetInfo::New(::google::protobuf::Arena* arena) const {
  VehicleFleetInfo* n = new VehicleFleetInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleFleetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:platoon.communication.VehicleFleetInfo)
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fmsmessageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&applyinfo_, 0, reinterpret_cast<char*>(&vehiclesquence_) -
    reinterpret_cast<char*>(&applyinfo_) + sizeof(vehiclesquence_));
}

bool VehicleFleetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platoon.communication.VehicleFleetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .platoon.communication.FleetApplyType applyInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_applyinfo(static_cast< ::platoon::communication::FleetApplyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .platoon.communication.VehicleFleetInfo.VehicleFleetMode actualDriveMode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_actualdrivemode(static_cast< ::platoon::communication::VehicleFleetInfo_VehicleFleetMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 platoonNumber = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platoonnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vehicleSquence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehiclesquence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicleId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicleid().data(), this->vehicleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleFleetInfo.vehicleId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fmsMessageId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fmsmessageid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fmsmessageid().data(), this->fmsmessageid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "platoon.communication.VehicleFleetInfo.fmsMessageId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platoon.communication.VehicleFleetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platoon.communication.VehicleFleetInfo)
  return false;
#undef DO_
}

void VehicleFleetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platoon.communication.VehicleFleetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .platoon.communication.FleetApplyType applyInfo = 1;
  if (this->applyinfo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->applyinfo(), output);
  }

  // .platoon.communication.VehicleFleetInfo.VehicleFleetMode actualDriveMode = 2;
  if (this->actualdrivemode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->actualdrivemode(), output);
  }

  // int32 platoonNumber = 3;
  if (this->platoonnumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->platoonnumber(), output);
  }

  // int32 vehicleSquence = 4;
  if (this->vehiclesquence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vehiclesquence(), output);
  }

  // string vehicleId = 5;
  if (this->vehicleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicleid().data(), this->vehicleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleFleetInfo.vehicleId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->vehicleid(), output);
  }

  // string fmsMessageId = 6;
  if (this->fmsmessageid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fmsmessageid().data(), this->fmsmessageid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "platoon.communication.VehicleFleetInfo.fmsMessageId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fmsmessageid(), output);
  }

  // @@protoc_insertion_point(serialize_end:platoon.communication.VehicleFleetInfo)
}

size_t VehicleFleetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platoon.communication.VehicleFleetInfo)
  size_t total_size = 0;

  // string vehicleId = 5;
  if (this->vehicleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicleid());
  }

  // string fmsMessageId = 6;
  if (this->fmsmessageid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fmsmessageid());
  }

  // .platoon.communication.FleetApplyType applyInfo = 1;
  if (this->applyinfo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->applyinfo());
  }

  // .platoon.communication.VehicleFleetInfo.VehicleFleetMode actualDriveMode = 2;
  if (this->actualdrivemode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->actualdrivemode());
  }

  // int32 platoonNumber = 3;
  if (this->platoonnumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->platoonnumber());
  }

  // int32 vehicleSquence = 4;
  if (this->vehiclesquence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehiclesquence());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleFleetInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VehicleFleetInfo*>(&from));
}

void VehicleFleetInfo::MergeFrom(const VehicleFleetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platoon.communication.VehicleFleetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicleid().size() > 0) {

    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  if (from.fmsmessageid().size() > 0) {

    fmsmessageid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fmsmessageid_);
  }
  if (from.applyinfo() != 0) {
    set_applyinfo(from.applyinfo());
  }
  if (from.actualdrivemode() != 0) {
    set_actualdrivemode(from.actualdrivemode());
  }
  if (from.platoonnumber() != 0) {
    set_platoonnumber(from.platoonnumber());
  }
  if (from.vehiclesquence() != 0) {
    set_vehiclesquence(from.vehiclesquence());
  }
}

void VehicleFleetInfo::CopyFrom(const VehicleFleetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platoon.communication.VehicleFleetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleFleetInfo::IsInitialized() const {
  return true;
}

void VehicleFleetInfo::Swap(VehicleFleetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleFleetInfo::InternalSwap(VehicleFleetInfo* other) {
  vehicleid_.Swap(&other->vehicleid_);
  fmsmessageid_.Swap(&other->fmsmessageid_);
  std::swap(applyinfo_, other->applyinfo_);
  std::swap(actualdrivemode_, other->actualdrivemode_);
  std::swap(platoonnumber_, other->platoonnumber_);
  std::swap(vehiclesquence_, other->vehiclesquence_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VehicleFleetInfo::GetTypeName() const {
  return "platoon.communication.VehicleFleetInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleFleetInfo

// .platoon.communication.FleetApplyType applyInfo = 1;
void VehicleFleetInfo::clear_applyinfo() {
  applyinfo_ = 0;
}
::platoon::communication::FleetApplyType VehicleFleetInfo::applyinfo() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.applyInfo)
  return static_cast< ::platoon::communication::FleetApplyType >(applyinfo_);
}
void VehicleFleetInfo::set_applyinfo(::platoon::communication::FleetApplyType value) {
  
  applyinfo_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.applyInfo)
}

// .platoon.communication.VehicleFleetInfo.VehicleFleetMode actualDriveMode = 2;
void VehicleFleetInfo::clear_actualdrivemode() {
  actualdrivemode_ = 0;
}
::platoon::communication::VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::actualdrivemode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.actualDriveMode)
  return static_cast< ::platoon::communication::VehicleFleetInfo_VehicleFleetMode >(actualdrivemode_);
}
void VehicleFleetInfo::set_actualdrivemode(::platoon::communication::VehicleFleetInfo_VehicleFleetMode value) {
  
  actualdrivemode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.actualDriveMode)
}

// int32 platoonNumber = 3;
void VehicleFleetInfo::clear_platoonnumber() {
  platoonnumber_ = 0;
}
::google::protobuf::int32 VehicleFleetInfo::platoonnumber() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.platoonNumber)
  return platoonnumber_;
}
void VehicleFleetInfo::set_platoonnumber(::google::protobuf::int32 value) {
  
  platoonnumber_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.platoonNumber)
}

// int32 vehicleSquence = 4;
void VehicleFleetInfo::clear_vehiclesquence() {
  vehiclesquence_ = 0;
}
::google::protobuf::int32 VehicleFleetInfo::vehiclesquence() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.vehicleSquence)
  return vehiclesquence_;
}
void VehicleFleetInfo::set_vehiclesquence(::google::protobuf::int32 value) {
  
  vehiclesquence_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.vehicleSquence)
}

// string vehicleId = 5;
void VehicleFleetInfo::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleFleetInfo::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.vehicleId)
  return vehicleid_.GetNoArena();
}
void VehicleFleetInfo::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.vehicleId)
}
#if LANG_CXX11
void VehicleFleetInfo::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetInfo.vehicleId)
}
#endif
void VehicleFleetInfo::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetInfo.vehicleId)
}
void VehicleFleetInfo::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetInfo.vehicleId)
}
::std::string* VehicleFleetInfo::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetInfo.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleFleetInfo::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetInfo.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleFleetInfo::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetInfo.vehicleId)
}

// string fmsMessageId = 6;
void VehicleFleetInfo::clear_fmsmessageid() {
  fmsmessageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VehicleFleetInfo::fmsmessageid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.fmsMessageId)
  return fmsmessageid_.GetNoArena();
}
void VehicleFleetInfo::set_fmsmessageid(const ::std::string& value) {
  
  fmsmessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.fmsMessageId)
}
#if LANG_CXX11
void VehicleFleetInfo::set_fmsmessageid(::std::string&& value) {
  
  fmsmessageid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetInfo.fmsMessageId)
}
#endif
void VehicleFleetInfo::set_fmsmessageid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fmsmessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetInfo.fmsMessageId)
}
void VehicleFleetInfo::set_fmsmessageid(const char* value, size_t size) {
  
  fmsmessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetInfo.fmsMessageId)
}
::std::string* VehicleFleetInfo::mutable_fmsmessageid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetInfo.fmsMessageId)
  return fmsmessageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleFleetInfo::release_fmsmessageid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetInfo.fmsMessageId)
  
  return fmsmessageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleFleetInfo::set_allocated_fmsmessageid(::std::string* fmsmessageid) {
  if (fmsmessageid != NULL) {
    
  } else {
    
  }
  fmsmessageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fmsmessageid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetInfo.fmsMessageId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace communication
}  // namespace platoon

// @@protoc_insertion_point(global_scope)
