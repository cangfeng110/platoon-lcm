// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataMessageProto.proto

#ifndef PROTOBUF_DataMessageProto_2eproto__INCLUDED
#define PROTOBUF_DataMessageProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include <google/protobuf/timestamp.pb.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace google {
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google
namespace platoon {
namespace communication {
class DriveUnitOperation;
class DriveUnitOperationDefaultTypeInternal;
extern DriveUnitOperationDefaultTypeInternal _DriveUnitOperation_default_instance_;
class DriveUnitOperationResult;
class DriveUnitOperationResultDefaultTypeInternal;
extern DriveUnitOperationResultDefaultTypeInternal _DriveUnitOperationResult_default_instance_;
class DspFeedbackFrame;
class DspFeedbackFrameDefaultTypeInternal;
extern DspFeedbackFrameDefaultTypeInternal _DspFeedbackFrame_default_instance_;
class Fleet_node;
class Fleet_nodeDefaultTypeInternal;
extern Fleet_nodeDefaultTypeInternal _Fleet_node_default_instance_;
class OperationReceivedMsg;
class OperationReceivedMsgDefaultTypeInternal;
extern OperationReceivedMsgDefaultTypeInternal _OperationReceivedMsg_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class RequireLane;
class RequireLaneDefaultTypeInternal;
extern RequireLaneDefaultTypeInternal _RequireLane_default_instance_;
class RequireLaneResult;
class RequireLaneResultDefaultTypeInternal;
extern RequireLaneResultDefaultTypeInternal _RequireLaneResult_default_instance_;
class VehicleFleetInfo;
class VehicleFleetInfoDefaultTypeInternal;
extern VehicleFleetInfoDefaultTypeInternal _VehicleFleetInfo_default_instance_;
class VehicleFleetOperation;
class VehicleFleetOperationDefaultTypeInternal;
extern VehicleFleetOperationDefaultTypeInternal _VehicleFleetOperation_default_instance_;
class VehicleFleetResult;
class VehicleFleetResultDefaultTypeInternal;
extern VehicleFleetResultDefaultTypeInternal _VehicleFleetResult_default_instance_;
class VehicleInOutPortMsg;
class VehicleInOutPortMsgDefaultTypeInternal;
extern VehicleInOutPortMsgDefaultTypeInternal _VehicleInOutPortMsg_default_instance_;
}  // namespace communication
}  // namespace platoon

namespace platoon {
namespace communication {

namespace protobuf_DataMessageProto_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_DataMessageProto_2eproto

enum DriveUnitOperationResult_TASK_PerfResult {
  DriveUnitOperationResult_TASK_PerfResult_StatusUnavaliable = 0,
  DriveUnitOperationResult_TASK_PerfResult_Incompleted = 1,
  DriveUnitOperationResult_TASK_PerfResult_Completed = 2,
  DriveUnitOperationResult_TASK_PerfResult_Reserved_1_Result = 3,
  DriveUnitOperationResult_TASK_PerfResult_Reserved_2_Result = 4,
  DriveUnitOperationResult_TASK_PerfResult_DriveUnitOperationResult_TASK_PerfResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DriveUnitOperationResult_TASK_PerfResult_DriveUnitOperationResult_TASK_PerfResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DriveUnitOperationResult_TASK_PerfResult_IsValid(int value);
const DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult_TASK_PerfResult_TASK_PerfResult_MIN = DriveUnitOperationResult_TASK_PerfResult_StatusUnavaliable;
const DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult_TASK_PerfResult_TASK_PerfResult_MAX = DriveUnitOperationResult_TASK_PerfResult_Reserved_2_Result;
const int DriveUnitOperationResult_TASK_PerfResult_TASK_PerfResult_ARRAYSIZE = DriveUnitOperationResult_TASK_PerfResult_TASK_PerfResult_MAX + 1;

enum VehicleInOutPortMsg_AcrossPort_type {
  VehicleInOutPortMsg_AcrossPort_type_PortUnavaliable = 0,
  VehicleInOutPortMsg_AcrossPort_type_Leave_Port = 1,
  VehicleInOutPortMsg_AcrossPort_type_Approaching_Port = 2,
  VehicleInOutPortMsg_AcrossPort_type_Enter_Port = 3,
  VehicleInOutPortMsg_AcrossPort_type_Leave_Port_Success = 4,
  VehicleInOutPortMsg_AcrossPort_type_Leave_Port_Fail = 5,
  VehicleInOutPortMsg_AcrossPort_type_Enter_Port_Sucess = 6,
  VehicleInOutPortMsg_AcrossPort_type_Enter_Port_Fail = 7,
  VehicleInOutPortMsg_AcrossPort_type_VehicleInOutPortMsg_AcrossPort_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleInOutPortMsg_AcrossPort_type_VehicleInOutPortMsg_AcrossPort_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleInOutPortMsg_AcrossPort_type_IsValid(int value);
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg_AcrossPort_type_AcrossPort_type_MIN = VehicleInOutPortMsg_AcrossPort_type_PortUnavaliable;
const VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg_AcrossPort_type_AcrossPort_type_MAX = VehicleInOutPortMsg_AcrossPort_type_Enter_Port_Fail;
const int VehicleInOutPortMsg_AcrossPort_type_AcrossPort_type_ARRAYSIZE = VehicleInOutPortMsg_AcrossPort_type_AcrossPort_type_MAX + 1;

enum Fleet_node_NodeType {
  Fleet_node_NodeType_NODE_INVAILD = 0,
  Fleet_node_NodeType_NODE_GROUPING = 1,
  Fleet_node_NodeType_NODE_LEAVING = 2,
  Fleet_node_NodeType_Fleet_node_NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Fleet_node_NodeType_Fleet_node_NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Fleet_node_NodeType_IsValid(int value);
const Fleet_node_NodeType Fleet_node_NodeType_NodeType_MIN = Fleet_node_NodeType_NODE_INVAILD;
const Fleet_node_NodeType Fleet_node_NodeType_NodeType_MAX = Fleet_node_NodeType_NODE_LEAVING;
const int Fleet_node_NodeType_NodeType_ARRAYSIZE = Fleet_node_NodeType_NodeType_MAX + 1;

enum VehicleFleetInfo_VehicleFleetMode {
  VehicleFleetInfo_VehicleFleetMode_MAN_DRIVE = 0,
  VehicleFleetInfo_VehicleFleetMode_AUTO_DRIVE = 1,
  VehicleFleetInfo_VehicleFleetMode_FLEET_HEADER = 2,
  VehicleFleetInfo_VehicleFleetMode_FLEET_GROUPING = 3,
  VehicleFleetInfo_VehicleFleetMode_FLEET_KEEP = 4,
  VehicleFleetInfo_VehicleFleetMode_FLEET_LEAVING = 5,
  VehicleFleetInfo_VehicleFleetMode_MODE_ERROR = 6,
  VehicleFleetInfo_VehicleFleetMode_INVILIED = 7,
  VehicleFleetInfo_VehicleFleetMode_HEADER_WAITING = 8,
  VehicleFleetInfo_VehicleFleetMode_CUT_IN = 9,
  VehicleFleetInfo_VehicleFleetMode_VehicleFleetInfo_VehicleFleetMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleFleetInfo_VehicleFleetMode_VehicleFleetInfo_VehicleFleetMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleFleetInfo_VehicleFleetMode_IsValid(int value);
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo_VehicleFleetMode_VehicleFleetMode_MIN = VehicleFleetInfo_VehicleFleetMode_MAN_DRIVE;
const VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo_VehicleFleetMode_VehicleFleetMode_MAX = VehicleFleetInfo_VehicleFleetMode_CUT_IN;
const int VehicleFleetInfo_VehicleFleetMode_VehicleFleetMode_ARRAYSIZE = VehicleFleetInfo_VehicleFleetMode_VehicleFleetMode_MAX + 1;

enum FMS_MessageType {
  MsgNull_Error = 0,
  MsgRequestAndReqAns = 101,
  MsgHB = 201,
  MsgVehicleFB = 301,
  MsgTaskAndPerfResult = 302,
  MsgCrossingRequestAndAns = 303,
  MsgVehicleInOutPort = 305,
  MsgVehicleFleetAndPerfResult = 304,
  MsgVehicleFleetResult = 306,
  MsgOperationReceived = 401,
  FMS_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FMS_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FMS_MessageType_IsValid(int value);
const FMS_MessageType FMS_MessageType_MIN = MsgNull_Error;
const FMS_MessageType FMS_MessageType_MAX = MsgOperationReceived;
const int FMS_MessageType_ARRAYSIZE = FMS_MessageType_MAX + 1;

enum ContainerLocation {
  FRONT_BOX = 0,
  BACK_BOX = 1,
  FULL = 2,
  ContainerLocation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContainerLocation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContainerLocation_IsValid(int value);
const ContainerLocation ContainerLocation_MIN = FRONT_BOX;
const ContainerLocation ContainerLocation_MAX = FULL;
const int ContainerLocation_ARRAYSIZE = ContainerLocation_MAX + 1;

enum OperationCode {
  SELFCHECK = 0,
  SLOWSTOP = 1,
  EMERGENCYSTOP = 2,
  MOVE = 3,
  INCHFRONT = 4,
  INCHBACK = 5,
  CHANGEWORKMODE = 6,
  TASKGET = 7,
  LOAD = 8,
  UNLOAD = 9,
  REVERSE_LSTP = 10,
  OperationCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OperationCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OperationCode_IsValid(int value);
const OperationCode OperationCode_MIN = SELFCHECK;
const OperationCode OperationCode_MAX = REVERSE_LSTP;
const int OperationCode_ARRAYSIZE = OperationCode_MAX + 1;

enum WorkingMode {
  AUTO = 0,
  MAN_CONTROL = 1,
  REMOTE_CONTROL = 2,
  WorkingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WorkingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WorkingMode_IsValid(int value);
const WorkingMode WorkingMode_MIN = AUTO;
const WorkingMode WorkingMode_MAX = REMOTE_CONTROL;
const int WorkingMode_ARRAYSIZE = WorkingMode_MAX + 1;

enum ContainerForm {
  LIQUID_STATE = 0,
  SOLID_STATE = 1,
  ContainerForm_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContainerForm_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContainerForm_IsValid(int value);
const ContainerForm ContainerForm_MIN = LIQUID_STATE;
const ContainerForm ContainerForm_MAX = SOLID_STATE;
const int ContainerForm_ARRAYSIZE = ContainerForm_MAX + 1;

enum ContainerType {
  FORTY_FEET = 0,
  TWENTY_FEET = 1,
  DOUBLE_TWENTY_FEET = 2,
  ContainerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContainerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContainerType_IsValid(int value);
const ContainerType ContainerType_MIN = FORTY_FEET;
const ContainerType ContainerType_MAX = DOUBLE_TWENTY_FEET;
const int ContainerType_ARRAYSIZE = ContainerType_MAX + 1;

enum PathType {
  LANE = 0,
  STARTNODE = 1,
  BAY = 2,
  STSLOCATION = 3,
  TURNPOINTIN = 4,
  TURNPOINTOUT = 5,
  LANECHANGEIN = 6,
  LANECHANGEOUT = 7,
  PORTGATE = 8,
  LSTP = 9,
  PathType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PathType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PathType_IsValid(int value);
const PathType PathType_MIN = LANE;
const PathType PathType_MAX = LSTP;
const int PathType_ARRAYSIZE = PathType_MAX + 1;

enum VehicleStatus {
  FREE = 0,
  WAITINGLOAD = 1,
  WAITINGUNLOAD = 2,
  CHARGING = 3,
  ERROR = 4,
  VehicleStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VehicleStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VehicleStatus_IsValid(int value);
const VehicleStatus VehicleStatus_MIN = FREE;
const VehicleStatus VehicleStatus_MAX = ERROR;
const int VehicleStatus_ARRAYSIZE = VehicleStatus_MAX + 1;

enum Port_Id {
  PortUnavaliable = 0,
  Port_OutSide = 1,
  Port_DSG = 2,
  Port_YSG_1 = 3,
  Port_YSG_4 = 4,
  Port_SHSHG = 5,
  Port_WGQ_2 = 6,
  Port_TAICANGGANG = 7,
  Port_Id_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Port_Id_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Port_Id_IsValid(int value);
const Port_Id Port_Id_MIN = PortUnavaliable;
const Port_Id Port_Id_MAX = Port_TAICANGGANG;
const int Port_Id_ARRAYSIZE = Port_Id_MAX + 1;

enum FleetApplyType {
  APPLY_NULL = 0,
  APPLY_JOIN_FLEET = 1,
  APPLY_FLEET_HEADER = 2,
  FleetApplyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FleetApplyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FleetApplyType_IsValid(int value);
const FleetApplyType FleetApplyType_MIN = APPLY_NULL;
const FleetApplyType FleetApplyType_MAX = APPLY_FLEET_HEADER;
const int FleetApplyType_ARRAYSIZE = FleetApplyType_MAX + 1;

// ===================================================================

class DriveUnitOperation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.DriveUnitOperation) */ {
 public:
  DriveUnitOperation();
  virtual ~DriveUnitOperation();

  DriveUnitOperation(const DriveUnitOperation& from);

  inline DriveUnitOperation& operator=(const DriveUnitOperation& from) {
    CopyFrom(from);
    return *this;
  }

  static const DriveUnitOperation& default_instance();

  static inline const DriveUnitOperation* internal_default_instance() {
    return reinterpret_cast<const DriveUnitOperation*>(
               &_DriveUnitOperation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DriveUnitOperation* other);

  // implements Message ----------------------------------------------

  inline DriveUnitOperation* New() const PROTOBUF_FINAL { return New(NULL); }

  DriveUnitOperation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DriveUnitOperation& from);
  void MergeFrom(const DriveUnitOperation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DriveUnitOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .platoon.communication.Path nextPath = 12;
  int nextpath_size() const;
  void clear_nextpath();
  static const int kNextPathFieldNumber = 12;
  const ::platoon::communication::Path& nextpath(int index) const;
  ::platoon::communication::Path* mutable_nextpath(int index);
  ::platoon::communication::Path* add_nextpath();
  ::google::protobuf::RepeatedPtrField< ::platoon::communication::Path >*
      mutable_nextpath();
  const ::google::protobuf::RepeatedPtrField< ::platoon::communication::Path >&
      nextpath() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string vehicleId = 2;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 2;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // string signature = 14;
  void clear_signature();
  static const int kSignatureFieldNumber = 14;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // int32 taskId = 3;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 3;
  ::google::protobuf::int32 taskid() const;
  void set_taskid(::google::protobuf::int32 value);

  // int32 actionId = 4;
  void clear_actionid();
  static const int kActionIdFieldNumber = 4;
  ::google::protobuf::int32 actionid() const;
  void set_actionid(::google::protobuf::int32 value);

  // .platoon.communication.OperationCode operationCode = 5;
  void clear_operationcode();
  static const int kOperationCodeFieldNumber = 5;
  ::platoon::communication::OperationCode operationcode() const;
  void set_operationcode(::platoon::communication::OperationCode value);

  // .platoon.communication.WorkingMode workingMode = 6;
  void clear_workingmode();
  static const int kWorkingModeFieldNumber = 6;
  ::platoon::communication::WorkingMode workingmode() const;
  void set_workingmode(::platoon::communication::WorkingMode value);

  // int32 timeLimit = 7;
  void clear_timelimit();
  static const int kTimeLimitFieldNumber = 7;
  ::google::protobuf::int32 timelimit() const;
  void set_timelimit(::google::protobuf::int32 value);

  // float containerWeight = 8;
  void clear_containerweight();
  static const int kContainerWeightFieldNumber = 8;
  float containerweight() const;
  void set_containerweight(float value);

  // .platoon.communication.ContainerForm containerForm = 9;
  void clear_containerform();
  static const int kContainerFormFieldNumber = 9;
  ::platoon::communication::ContainerForm containerform() const;
  void set_containerform(::platoon::communication::ContainerForm value);

  // .platoon.communication.ContainerType containerType = 10;
  void clear_containertype();
  static const int kContainerTypeFieldNumber = 10;
  ::platoon::communication::ContainerType containertype() const;
  void set_containertype(::platoon::communication::ContainerType value);

  // .platoon.communication.ContainerLocation containerLocation = 11;
  void clear_containerlocation();
  static const int kContainerLocationFieldNumber = 11;
  ::platoon::communication::ContainerLocation containerlocation() const;
  void set_containerlocation(::platoon::communication::ContainerLocation value);

  // int32 inchingDistance = 13;
  void clear_inchingdistance();
  static const int kInchingDistanceFieldNumber = 13;
  ::google::protobuf::int32 inchingdistance() const;
  void set_inchingdistance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:platoon.communication.DriveUnitOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::platoon::communication::Path > nextpath_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 actionid_;
  int operationcode_;
  int workingmode_;
  ::google::protobuf::int32 timelimit_;
  float containerweight_;
  int containerform_;
  int containertype_;
  int containerlocation_;
  ::google::protobuf::int32 inchingdistance_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Path : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }

  static const Path& default_instance();

  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Path* other);

  // implements Message ----------------------------------------------

  inline Path* New() const PROTOBUF_FINAL { return New(NULL); }

  Path* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string eliminateLaneId = 5;
  int eliminatelaneid_size() const;
  void clear_eliminatelaneid();
  static const int kEliminateLaneIdFieldNumber = 5;
  const ::std::string& eliminatelaneid(int index) const;
  ::std::string* mutable_eliminatelaneid(int index);
  void set_eliminatelaneid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_eliminatelaneid(int index, ::std::string&& value);
  #endif
  void set_eliminatelaneid(int index, const char* value);
  void set_eliminatelaneid(int index, const char* value, size_t size);
  ::std::string* add_eliminatelaneid();
  void add_eliminatelaneid(const ::std::string& value);
  #if LANG_CXX11
  void add_eliminatelaneid(::std::string&& value);
  #endif
  void add_eliminatelaneid(const char* value);
  void add_eliminatelaneid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& eliminatelaneid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_eliminatelaneid();

  // string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // double posX = 2;
  void clear_posx();
  static const int kPosXFieldNumber = 2;
  double posx() const;
  void set_posx(double value);

  // double posY = 3;
  void clear_posy();
  static const int kPosYFieldNumber = 3;
  double posy() const;
  void set_posy(double value);

  // .platoon.communication.PathType pathType = 4;
  void clear_pathtype();
  static const int kPathTypeFieldNumber = 4;
  ::platoon::communication::PathType pathtype() const;
  void set_pathtype(::platoon::communication::PathType value);

  // @@protoc_insertion_point(class_scope:platoon.communication.Path)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> eliminatelaneid_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double posx_;
  double posy_;
  int pathtype_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DriveUnitOperationResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.DriveUnitOperationResult) */ {
 public:
  DriveUnitOperationResult();
  virtual ~DriveUnitOperationResult();

  DriveUnitOperationResult(const DriveUnitOperationResult& from);

  inline DriveUnitOperationResult& operator=(const DriveUnitOperationResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const DriveUnitOperationResult& default_instance();

  static inline const DriveUnitOperationResult* internal_default_instance() {
    return reinterpret_cast<const DriveUnitOperationResult*>(
               &_DriveUnitOperationResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DriveUnitOperationResult* other);

  // implements Message ----------------------------------------------

  inline DriveUnitOperationResult* New() const PROTOBUF_FINAL { return New(NULL); }

  DriveUnitOperationResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DriveUnitOperationResult& from);
  void MergeFrom(const DriveUnitOperationResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DriveUnitOperationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DriveUnitOperationResult_TASK_PerfResult TASK_PerfResult;
  static const TASK_PerfResult StatusUnavaliable =
    DriveUnitOperationResult_TASK_PerfResult_StatusUnavaliable;
  static const TASK_PerfResult Incompleted =
    DriveUnitOperationResult_TASK_PerfResult_Incompleted;
  static const TASK_PerfResult Completed =
    DriveUnitOperationResult_TASK_PerfResult_Completed;
  static const TASK_PerfResult Reserved_1_Result =
    DriveUnitOperationResult_TASK_PerfResult_Reserved_1_Result;
  static const TASK_PerfResult Reserved_2_Result =
    DriveUnitOperationResult_TASK_PerfResult_Reserved_2_Result;
  static inline bool TASK_PerfResult_IsValid(int value) {
    return DriveUnitOperationResult_TASK_PerfResult_IsValid(value);
  }
  static const TASK_PerfResult TASK_PerfResult_MIN =
    DriveUnitOperationResult_TASK_PerfResult_TASK_PerfResult_MIN;
  static const TASK_PerfResult TASK_PerfResult_MAX =
    DriveUnitOperationResult_TASK_PerfResult_TASK_PerfResult_MAX;
  static const int TASK_PerfResult_ARRAYSIZE =
    DriveUnitOperationResult_TASK_PerfResult_TASK_PerfResult_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string vehicleId = 2;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 2;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // string signature = 7;
  void clear_signature();
  static const int kSignatureFieldNumber = 7;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // int32 taskId = 3;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 3;
  ::google::protobuf::int32 taskid() const;
  void set_taskid(::google::protobuf::int32 value);

  // int32 actionId = 4;
  void clear_actionid();
  static const int kActionIdFieldNumber = 4;
  ::google::protobuf::int32 actionid() const;
  void set_actionid(::google::protobuf::int32 value);

  // .platoon.communication.OperationCode operationCode = 5;
  void clear_operationcode();
  static const int kOperationCodeFieldNumber = 5;
  ::platoon::communication::OperationCode operationcode() const;
  void set_operationcode(::platoon::communication::OperationCode value);

  // .platoon.communication.DriveUnitOperationResult.TASK_PerfResult result = 6;
  void clear_result();
  static const int kResultFieldNumber = 6;
  ::platoon::communication::DriveUnitOperationResult_TASK_PerfResult result() const;
  void set_result(::platoon::communication::DriveUnitOperationResult_TASK_PerfResult value);

  // @@protoc_insertion_point(class_scope:platoon.communication.DriveUnitOperationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 actionid_;
  int operationcode_;
  int result_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DspFeedbackFrame : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.DspFeedbackFrame) */ {
 public:
  DspFeedbackFrame();
  virtual ~DspFeedbackFrame();

  DspFeedbackFrame(const DspFeedbackFrame& from);

  inline DspFeedbackFrame& operator=(const DspFeedbackFrame& from) {
    CopyFrom(from);
    return *this;
  }

  static const DspFeedbackFrame& default_instance();

  static inline const DspFeedbackFrame* internal_default_instance() {
    return reinterpret_cast<const DspFeedbackFrame*>(
               &_DspFeedbackFrame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DspFeedbackFrame* other);

  // implements Message ----------------------------------------------

  inline DspFeedbackFrame* New() const PROTOBUF_FINAL { return New(NULL); }

  DspFeedbackFrame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DspFeedbackFrame& from);
  void MergeFrom(const DspFeedbackFrame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DspFeedbackFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vehicleId = 1;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 1;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // string curLaneId = 8;
  void clear_curlaneid();
  static const int kCurLaneIdFieldNumber = 8;
  const ::std::string& curlaneid() const;
  void set_curlaneid(const ::std::string& value);
  #if LANG_CXX11
  void set_curlaneid(::std::string&& value);
  #endif
  void set_curlaneid(const char* value);
  void set_curlaneid(const char* value, size_t size);
  ::std::string* mutable_curlaneid();
  ::std::string* release_curlaneid();
  void set_allocated_curlaneid(::std::string* curlaneid);

  // string preLaneId = 9;
  void clear_prelaneid();
  static const int kPreLaneIdFieldNumber = 9;
  const ::std::string& prelaneid() const;
  void set_prelaneid(const ::std::string& value);
  #if LANG_CXX11
  void set_prelaneid(::std::string&& value);
  #endif
  void set_prelaneid(const char* value);
  void set_prelaneid(const char* value, size_t size);
  ::std::string* mutable_prelaneid();
  ::std::string* release_prelaneid();
  void set_allocated_prelaneid(::std::string* prelaneid);

  // string nextLaneId = 10;
  void clear_nextlaneid();
  static const int kNextLaneIdFieldNumber = 10;
  const ::std::string& nextlaneid() const;
  void set_nextlaneid(const ::std::string& value);
  #if LANG_CXX11
  void set_nextlaneid(::std::string&& value);
  #endif
  void set_nextlaneid(const char* value);
  void set_nextlaneid(const char* value, size_t size);
  ::std::string* mutable_nextlaneid();
  ::std::string* release_nextlaneid();
  void set_allocated_nextlaneid(::std::string* nextlaneid);

  // string curBayId = 20;
  void clear_curbayid();
  static const int kCurBayIdFieldNumber = 20;
  const ::std::string& curbayid() const;
  void set_curbayid(const ::std::string& value);
  #if LANG_CXX11
  void set_curbayid(::std::string&& value);
  #endif
  void set_curbayid(const char* value);
  void set_curbayid(const char* value, size_t size);
  ::std::string* mutable_curbayid();
  ::std::string* release_curbayid();
  void set_allocated_curbayid(::std::string* curbayid);

  // string fleetId = 22;
  void clear_fleetid();
  static const int kFleetIdFieldNumber = 22;
  const ::std::string& fleetid() const;
  void set_fleetid(const ::std::string& value);
  #if LANG_CXX11
  void set_fleetid(::std::string&& value);
  #endif
  void set_fleetid(const char* value);
  void set_fleetid(const char* value, size_t size);
  ::std::string* mutable_fleetid();
  ::std::string* release_fleetid();
  void set_allocated_fleetid(::std::string* fleetid);

  // string signature = 23;
  void clear_signature();
  static const int kSignatureFieldNumber = 23;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // .google.protobuf.Timestamp curtime = 19;
  bool has_curtime() const;
  void clear_curtime();
  static const int kCurtimeFieldNumber = 19;
  const ::google::protobuf::Timestamp& curtime() const;
  ::google::protobuf::Timestamp* mutable_curtime();
  ::google::protobuf::Timestamp* release_curtime();
  void set_allocated_curtime(::google::protobuf::Timestamp* curtime);

  // int32 taskId = 2;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 2;
  ::google::protobuf::int32 taskid() const;
  void set_taskid(::google::protobuf::int32 value);

  // int32 actionId = 3;
  void clear_actionid();
  static const int kActionIdFieldNumber = 3;
  ::google::protobuf::int32 actionid() const;
  void set_actionid(::google::protobuf::int32 value);

  // .platoon.communication.VehicleStatus vehicleStatus = 4;
  void clear_vehiclestatus();
  static const int kVehicleStatusFieldNumber = 4;
  ::platoon::communication::VehicleStatus vehiclestatus() const;
  void set_vehiclestatus(::platoon::communication::VehicleStatus value);

  // .platoon.communication.WorkingMode workingMode = 5;
  void clear_workingmode();
  static const int kWorkingModeFieldNumber = 5;
  ::platoon::communication::WorkingMode workingmode() const;
  void set_workingmode(::platoon::communication::WorkingMode value);

  // float energyLevel = 6;
  void clear_energylevel();
  static const int kEnergyLevelFieldNumber = 6;
  float energylevel() const;
  void set_energylevel(float value);

  // float mileage = 7;
  void clear_mileage();
  static const int kMileageFieldNumber = 7;
  float mileage() const;
  void set_mileage(float value);

  // double longitude = 11;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 11;
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 12;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 12;
  double latitude() const;
  void set_latitude(double value);

  // int32 errorCode = 13;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 13;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // float speed = 14;
  void clear_speed();
  static const int kSpeedFieldNumber = 14;
  float speed() const;
  void set_speed(float value);

  // float heading = 15;
  void clear_heading();
  static const int kHeadingFieldNumber = 15;
  float heading() const;
  void set_heading(float value);

  // int32 containerWeight = 16;
  void clear_containerweight();
  static const int kContainerWeightFieldNumber = 16;
  ::google::protobuf::int32 containerweight() const;
  void set_containerweight(::google::protobuf::int32 value);

  // bool withContainer = 17;
  void clear_withcontainer();
  static const int kWithContainerFieldNumber = 17;
  bool withcontainer() const;
  void set_withcontainer(bool value);

  // .platoon.communication.ContainerLocation containerLocation = 18;
  void clear_containerlocation();
  static const int kContainerLocationFieldNumber = 18;
  ::platoon::communication::ContainerLocation containerlocation() const;
  void set_containerlocation(::platoon::communication::ContainerLocation value);

  // .platoon.communication.Port_Id curPortId = 21;
  void clear_curportid();
  static const int kCurPortIdFieldNumber = 21;
  ::platoon::communication::Port_Id curportid() const;
  void set_curportid(::platoon::communication::Port_Id value);

  // float subMileage = 24;
  void clear_submileage();
  static const int kSubMileageFieldNumber = 24;
  float submileage() const;
  void set_submileage(float value);

  // @@protoc_insertion_point(class_scope:platoon.communication.DspFeedbackFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::internal::ArenaStringPtr curlaneid_;
  ::google::protobuf::internal::ArenaStringPtr prelaneid_;
  ::google::protobuf::internal::ArenaStringPtr nextlaneid_;
  ::google::protobuf::internal::ArenaStringPtr curbayid_;
  ::google::protobuf::internal::ArenaStringPtr fleetid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::Timestamp* curtime_;
  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 actionid_;
  int vehiclestatus_;
  int workingmode_;
  float energylevel_;
  float mileage_;
  double longitude_;
  double latitude_;
  ::google::protobuf::int32 errorcode_;
  float speed_;
  float heading_;
  ::google::protobuf::int32 containerweight_;
  bool withcontainer_;
  int containerlocation_;
  int curportid_;
  float submileage_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequireLane : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.RequireLane) */ {
 public:
  RequireLane();
  virtual ~RequireLane();

  RequireLane(const RequireLane& from);

  inline RequireLane& operator=(const RequireLane& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequireLane& default_instance();

  static inline const RequireLane* internal_default_instance() {
    return reinterpret_cast<const RequireLane*>(
               &_RequireLane_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RequireLane* other);

  // implements Message ----------------------------------------------

  inline RequireLane* New() const PROTOBUF_FINAL { return New(NULL); }

  RequireLane* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RequireLane& from);
  void MergeFrom(const RequireLane& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequireLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string linkId = 2;
  void clear_linkid();
  static const int kLinkIdFieldNumber = 2;
  const ::std::string& linkid() const;
  void set_linkid(const ::std::string& value);
  #if LANG_CXX11
  void set_linkid(::std::string&& value);
  #endif
  void set_linkid(const char* value);
  void set_linkid(const char* value, size_t size);
  ::std::string* mutable_linkid();
  ::std::string* release_linkid();
  void set_allocated_linkid(::std::string* linkid);

  // string vehicleId = 3;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 3;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // string signature = 4;
  void clear_signature();
  static const int kSignatureFieldNumber = 4;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:platoon.communication.RequireLane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr linkid_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequireLaneResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.RequireLaneResult) */ {
 public:
  RequireLaneResult();
  virtual ~RequireLaneResult();

  RequireLaneResult(const RequireLaneResult& from);

  inline RequireLaneResult& operator=(const RequireLaneResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const RequireLaneResult& default_instance();

  static inline const RequireLaneResult* internal_default_instance() {
    return reinterpret_cast<const RequireLaneResult*>(
               &_RequireLaneResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RequireLaneResult* other);

  // implements Message ----------------------------------------------

  inline RequireLaneResult* New() const PROTOBUF_FINAL { return New(NULL); }

  RequireLaneResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RequireLaneResult& from);
  void MergeFrom(const RequireLaneResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequireLaneResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string linkId = 2;
  void clear_linkid();
  static const int kLinkIdFieldNumber = 2;
  const ::std::string& linkid() const;
  void set_linkid(const ::std::string& value);
  #if LANG_CXX11
  void set_linkid(::std::string&& value);
  #endif
  void set_linkid(const char* value);
  void set_linkid(const char* value, size_t size);
  ::std::string* mutable_linkid();
  ::std::string* release_linkid();
  void set_allocated_linkid(::std::string* linkid);

  // string vehicleId = 3;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 3;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // string signature = 5;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // bool result = 4;
  void clear_result();
  static const int kResultFieldNumber = 4;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:platoon.communication.RequireLaneResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr linkid_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  bool result_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleInOutPortMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.VehicleInOutPortMsg) */ {
 public:
  VehicleInOutPortMsg();
  virtual ~VehicleInOutPortMsg();

  VehicleInOutPortMsg(const VehicleInOutPortMsg& from);

  inline VehicleInOutPortMsg& operator=(const VehicleInOutPortMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const VehicleInOutPortMsg& default_instance();

  static inline const VehicleInOutPortMsg* internal_default_instance() {
    return reinterpret_cast<const VehicleInOutPortMsg*>(
               &_VehicleInOutPortMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VehicleInOutPortMsg* other);

  // implements Message ----------------------------------------------

  inline VehicleInOutPortMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleInOutPortMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VehicleInOutPortMsg& from);
  void MergeFrom(const VehicleInOutPortMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleInOutPortMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VehicleInOutPortMsg_AcrossPort_type AcrossPort_type;
  static const AcrossPort_type PortUnavaliable =
    VehicleInOutPortMsg_AcrossPort_type_PortUnavaliable;
  static const AcrossPort_type Leave_Port =
    VehicleInOutPortMsg_AcrossPort_type_Leave_Port;
  static const AcrossPort_type Approaching_Port =
    VehicleInOutPortMsg_AcrossPort_type_Approaching_Port;
  static const AcrossPort_type Enter_Port =
    VehicleInOutPortMsg_AcrossPort_type_Enter_Port;
  static const AcrossPort_type Leave_Port_Success =
    VehicleInOutPortMsg_AcrossPort_type_Leave_Port_Success;
  static const AcrossPort_type Leave_Port_Fail =
    VehicleInOutPortMsg_AcrossPort_type_Leave_Port_Fail;
  static const AcrossPort_type Enter_Port_Sucess =
    VehicleInOutPortMsg_AcrossPort_type_Enter_Port_Sucess;
  static const AcrossPort_type Enter_Port_Fail =
    VehicleInOutPortMsg_AcrossPort_type_Enter_Port_Fail;
  static inline bool AcrossPort_type_IsValid(int value) {
    return VehicleInOutPortMsg_AcrossPort_type_IsValid(value);
  }
  static const AcrossPort_type AcrossPort_type_MIN =
    VehicleInOutPortMsg_AcrossPort_type_AcrossPort_type_MIN;
  static const AcrossPort_type AcrossPort_type_MAX =
    VehicleInOutPortMsg_AcrossPort_type_AcrossPort_type_MAX;
  static const int AcrossPort_type_ARRAYSIZE =
    VehicleInOutPortMsg_AcrossPort_type_AcrossPort_type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string vehicleId = 2;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 2;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // string signature = 7;
  void clear_signature();
  static const int kSignatureFieldNumber = 7;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // int32 taskId = 3;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 3;
  ::google::protobuf::int32 taskid() const;
  void set_taskid(::google::protobuf::int32 value);

  // int32 actionId = 4;
  void clear_actionid();
  static const int kActionIdFieldNumber = 4;
  ::google::protobuf::int32 actionid() const;
  void set_actionid(::google::protobuf::int32 value);

  // .platoon.communication.VehicleInOutPortMsg.AcrossPort_type eventType = 5;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 5;
  ::platoon::communication::VehicleInOutPortMsg_AcrossPort_type eventtype() const;
  void set_eventtype(::platoon::communication::VehicleInOutPortMsg_AcrossPort_type value);

  // .platoon.communication.Port_Id portId = 6;
  void clear_portid();
  static const int kPortIdFieldNumber = 6;
  ::platoon::communication::Port_Id portid() const;
  void set_portid(::platoon::communication::Port_Id value);

  // @@protoc_insertion_point(class_scope:platoon.communication.VehicleInOutPortMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 actionid_;
  int eventtype_;
  int portid_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OperationReceivedMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.OperationReceivedMsg) */ {
 public:
  OperationReceivedMsg();
  virtual ~OperationReceivedMsg();

  OperationReceivedMsg(const OperationReceivedMsg& from);

  inline OperationReceivedMsg& operator=(const OperationReceivedMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const OperationReceivedMsg& default_instance();

  static inline const OperationReceivedMsg* internal_default_instance() {
    return reinterpret_cast<const OperationReceivedMsg*>(
               &_OperationReceivedMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(OperationReceivedMsg* other);

  // implements Message ----------------------------------------------

  inline OperationReceivedMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  OperationReceivedMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const OperationReceivedMsg& from);
  void MergeFrom(const OperationReceivedMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OperationReceivedMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string coId = 2;
  void clear_coid();
  static const int kCoIdFieldNumber = 2;
  const ::std::string& coid() const;
  void set_coid(const ::std::string& value);
  #if LANG_CXX11
  void set_coid(::std::string&& value);
  #endif
  void set_coid(const char* value);
  void set_coid(const char* value, size_t size);
  ::std::string* mutable_coid();
  ::std::string* release_coid();
  void set_allocated_coid(::std::string* coid);

  // @@protoc_insertion_point(class_scope:platoon.communication.OperationReceivedMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr coid_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Fleet_node : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.Fleet_node) */ {
 public:
  Fleet_node();
  virtual ~Fleet_node();

  Fleet_node(const Fleet_node& from);

  inline Fleet_node& operator=(const Fleet_node& from) {
    CopyFrom(from);
    return *this;
  }

  static const Fleet_node& default_instance();

  static inline const Fleet_node* internal_default_instance() {
    return reinterpret_cast<const Fleet_node*>(
               &_Fleet_node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Fleet_node* other);

  // implements Message ----------------------------------------------

  inline Fleet_node* New() const PROTOBUF_FINAL { return New(NULL); }

  Fleet_node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Fleet_node& from);
  void MergeFrom(const Fleet_node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Fleet_node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Fleet_node_NodeType NodeType;
  static const NodeType NODE_INVAILD =
    Fleet_node_NodeType_NODE_INVAILD;
  static const NodeType NODE_GROUPING =
    Fleet_node_NodeType_NODE_GROUPING;
  static const NodeType NODE_LEAVING =
    Fleet_node_NodeType_NODE_LEAVING;
  static inline bool NodeType_IsValid(int value) {
    return Fleet_node_NodeType_IsValid(value);
  }
  static const NodeType NodeType_MIN =
    Fleet_node_NodeType_NodeType_MIN;
  static const NodeType NodeType_MAX =
    Fleet_node_NodeType_NodeType_MAX;
  static const int NodeType_ARRAYSIZE =
    Fleet_node_NodeType_NodeType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // double posX = 1;
  void clear_posx();
  static const int kPosXFieldNumber = 1;
  double posx() const;
  void set_posx(double value);

  // double posY = 2;
  void clear_posy();
  static const int kPosYFieldNumber = 2;
  double posy() const;
  void set_posy(double value);

  // .platoon.communication.Fleet_node.NodeType nodeType = 3;
  void clear_nodetype();
  static const int kNodeTypeFieldNumber = 3;
  ::platoon::communication::Fleet_node_NodeType nodetype() const;
  void set_nodetype(::platoon::communication::Fleet_node_NodeType value);

  // @@protoc_insertion_point(class_scope:platoon.communication.Fleet_node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double posx_;
  double posy_;
  int nodetype_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleFleetOperation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.VehicleFleetOperation) */ {
 public:
  VehicleFleetOperation();
  virtual ~VehicleFleetOperation();

  VehicleFleetOperation(const VehicleFleetOperation& from);

  inline VehicleFleetOperation& operator=(const VehicleFleetOperation& from) {
    CopyFrom(from);
    return *this;
  }

  static const VehicleFleetOperation& default_instance();

  static inline const VehicleFleetOperation* internal_default_instance() {
    return reinterpret_cast<const VehicleFleetOperation*>(
               &_VehicleFleetOperation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(VehicleFleetOperation* other);

  // implements Message ----------------------------------------------

  inline VehicleFleetOperation* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleFleetOperation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VehicleFleetOperation& from);
  void MergeFrom(const VehicleFleetOperation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleFleetOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string platoonMember = 3;
  int platoonmember_size() const;
  void clear_platoonmember();
  static const int kPlatoonMemberFieldNumber = 3;
  const ::std::string& platoonmember(int index) const;
  ::std::string* mutable_platoonmember(int index);
  void set_platoonmember(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_platoonmember(int index, ::std::string&& value);
  #endif
  void set_platoonmember(int index, const char* value);
  void set_platoonmember(int index, const char* value, size_t size);
  ::std::string* add_platoonmember();
  void add_platoonmember(const ::std::string& value);
  #if LANG_CXX11
  void add_platoonmember(::std::string&& value);
  #endif
  void add_platoonmember(const char* value);
  void add_platoonmember(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& platoonmember() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_platoonmember();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string vehicleId = 2;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 2;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // string signature = 10;
  void clear_signature();
  static const int kSignatureFieldNumber = 10;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // .google.protobuf.Timestamp startTime = 5;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 5;
  const ::google::protobuf::Timestamp& starttime() const;
  ::google::protobuf::Timestamp* mutable_starttime();
  ::google::protobuf::Timestamp* release_starttime();
  void set_allocated_starttime(::google::protobuf::Timestamp* starttime);

  // .platoon.communication.Fleet_node startNode = 6;
  bool has_startnode() const;
  void clear_startnode();
  static const int kStartNodeFieldNumber = 6;
  const ::platoon::communication::Fleet_node& startnode() const;
  ::platoon::communication::Fleet_node* mutable_startnode();
  ::platoon::communication::Fleet_node* release_startnode();
  void set_allocated_startnode(::platoon::communication::Fleet_node* startnode);

  // .platoon.communication.Fleet_node endNode = 7;
  bool has_endnode() const;
  void clear_endnode();
  static const int kEndNodeFieldNumber = 7;
  const ::platoon::communication::Fleet_node& endnode() const;
  ::platoon::communication::Fleet_node* mutable_endnode();
  ::platoon::communication::Fleet_node* release_endnode();
  void set_allocated_endnode(::platoon::communication::Fleet_node* endnode);

  // int32 platoonNumber = 4;
  void clear_platoonnumber();
  static const int kPlatoonNumberFieldNumber = 4;
  ::google::protobuf::int32 platoonnumber() const;
  void set_platoonnumber(::google::protobuf::int32 value);

  // .platoon.communication.Port_Id srcPort = 8;
  void clear_srcport();
  static const int kSrcPortFieldNumber = 8;
  ::platoon::communication::Port_Id srcport() const;
  void set_srcport(::platoon::communication::Port_Id value);

  // double safe_distance = 11;
  void clear_safe_distance();
  static const int kSafeDistanceFieldNumber = 11;
  double safe_distance() const;
  void set_safe_distance(double value);

  // .platoon.communication.Port_Id dstPort = 9;
  void clear_dstport();
  static const int kDstPortFieldNumber = 9;
  ::platoon::communication::Port_Id dstport() const;
  void set_dstport(::platoon::communication::Port_Id value);

  // @@protoc_insertion_point(class_scope:platoon.communication.VehicleFleetOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> platoonmember_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::Timestamp* starttime_;
  ::platoon::communication::Fleet_node* startnode_;
  ::platoon::communication::Fleet_node* endnode_;
  ::google::protobuf::int32 platoonnumber_;
  int srcport_;
  double safe_distance_;
  int dstport_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleFleetResult : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.VehicleFleetResult) */ {
 public:
  VehicleFleetResult();
  virtual ~VehicleFleetResult();

  VehicleFleetResult(const VehicleFleetResult& from);

  inline VehicleFleetResult& operator=(const VehicleFleetResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const VehicleFleetResult& default_instance();

  static inline const VehicleFleetResult* internal_default_instance() {
    return reinterpret_cast<const VehicleFleetResult*>(
               &_VehicleFleetResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(VehicleFleetResult* other);

  // implements Message ----------------------------------------------

  inline VehicleFleetResult* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleFleetResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VehicleFleetResult& from);
  void MergeFrom(const VehicleFleetResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleFleetResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string vehicleId = 2;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 2;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // string signature = 10;
  void clear_signature();
  static const int kSignatureFieldNumber = 10;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // int32 platoonNumber = 4;
  void clear_platoonnumber();
  static const int kPlatoonNumberFieldNumber = 4;
  ::google::protobuf::int32 platoonnumber() const;
  void set_platoonnumber(::google::protobuf::int32 value);

  // .platoon.communication.FleetApplyType applyInfo = 5;
  void clear_applyinfo();
  static const int kApplyInfoFieldNumber = 5;
  ::platoon::communication::FleetApplyType applyinfo() const;
  void set_applyinfo(::platoon::communication::FleetApplyType value);

  // bool applyResult = 7;
  void clear_applyresult();
  static const int kApplyResultFieldNumber = 7;
  bool applyresult() const;
  void set_applyresult(bool value);

  // @@protoc_insertion_point(class_scope:platoon.communication.VehicleFleetResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::int32 platoonnumber_;
  int applyinfo_;
  bool applyresult_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleFleetInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:platoon.communication.VehicleFleetInfo) */ {
 public:
  VehicleFleetInfo();
  virtual ~VehicleFleetInfo();

  VehicleFleetInfo(const VehicleFleetInfo& from);

  inline VehicleFleetInfo& operator=(const VehicleFleetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const VehicleFleetInfo& default_instance();

  static inline const VehicleFleetInfo* internal_default_instance() {
    return reinterpret_cast<const VehicleFleetInfo*>(
               &_VehicleFleetInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(VehicleFleetInfo* other);

  // implements Message ----------------------------------------------

  inline VehicleFleetInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleFleetInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VehicleFleetInfo& from);
  void MergeFrom(const VehicleFleetInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VehicleFleetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VehicleFleetInfo_VehicleFleetMode VehicleFleetMode;
  static const VehicleFleetMode MAN_DRIVE =
    VehicleFleetInfo_VehicleFleetMode_MAN_DRIVE;
  static const VehicleFleetMode AUTO_DRIVE =
    VehicleFleetInfo_VehicleFleetMode_AUTO_DRIVE;
  static const VehicleFleetMode FLEET_HEADER =
    VehicleFleetInfo_VehicleFleetMode_FLEET_HEADER;
  static const VehicleFleetMode FLEET_GROUPING =
    VehicleFleetInfo_VehicleFleetMode_FLEET_GROUPING;
  static const VehicleFleetMode FLEET_KEEP =
    VehicleFleetInfo_VehicleFleetMode_FLEET_KEEP;
  static const VehicleFleetMode FLEET_LEAVING =
    VehicleFleetInfo_VehicleFleetMode_FLEET_LEAVING;
  static const VehicleFleetMode MODE_ERROR =
    VehicleFleetInfo_VehicleFleetMode_MODE_ERROR;
  static const VehicleFleetMode INVILIED =
    VehicleFleetInfo_VehicleFleetMode_INVILIED;
  static const VehicleFleetMode HEADER_WAITING =
    VehicleFleetInfo_VehicleFleetMode_HEADER_WAITING;
  static const VehicleFleetMode CUT_IN =
    VehicleFleetInfo_VehicleFleetMode_CUT_IN;
  static inline bool VehicleFleetMode_IsValid(int value) {
    return VehicleFleetInfo_VehicleFleetMode_IsValid(value);
  }
  static const VehicleFleetMode VehicleFleetMode_MIN =
    VehicleFleetInfo_VehicleFleetMode_VehicleFleetMode_MIN;
  static const VehicleFleetMode VehicleFleetMode_MAX =
    VehicleFleetInfo_VehicleFleetMode_VehicleFleetMode_MAX;
  static const int VehicleFleetMode_ARRAYSIZE =
    VehicleFleetInfo_VehicleFleetMode_VehicleFleetMode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string vehicleId = 5;
  void clear_vehicleid();
  static const int kVehicleIdFieldNumber = 5;
  const ::std::string& vehicleid() const;
  void set_vehicleid(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicleid(::std::string&& value);
  #endif
  void set_vehicleid(const char* value);
  void set_vehicleid(const char* value, size_t size);
  ::std::string* mutable_vehicleid();
  ::std::string* release_vehicleid();
  void set_allocated_vehicleid(::std::string* vehicleid);

  // string fmsMessageId = 6;
  void clear_fmsmessageid();
  static const int kFmsMessageIdFieldNumber = 6;
  const ::std::string& fmsmessageid() const;
  void set_fmsmessageid(const ::std::string& value);
  #if LANG_CXX11
  void set_fmsmessageid(::std::string&& value);
  #endif
  void set_fmsmessageid(const char* value);
  void set_fmsmessageid(const char* value, size_t size);
  ::std::string* mutable_fmsmessageid();
  ::std::string* release_fmsmessageid();
  void set_allocated_fmsmessageid(::std::string* fmsmessageid);

  // .platoon.communication.FleetApplyType applyInfo = 1;
  void clear_applyinfo();
  static const int kApplyInfoFieldNumber = 1;
  ::platoon::communication::FleetApplyType applyinfo() const;
  void set_applyinfo(::platoon::communication::FleetApplyType value);

  // .platoon.communication.VehicleFleetInfo.VehicleFleetMode actualDriveMode = 2;
  void clear_actualdrivemode();
  static const int kActualDriveModeFieldNumber = 2;
  ::platoon::communication::VehicleFleetInfo_VehicleFleetMode actualdrivemode() const;
  void set_actualdrivemode(::platoon::communication::VehicleFleetInfo_VehicleFleetMode value);

  // int32 platoonNumber = 3;
  void clear_platoonnumber();
  static const int kPlatoonNumberFieldNumber = 3;
  ::google::protobuf::int32 platoonnumber() const;
  void set_platoonnumber(::google::protobuf::int32 value);

  // int32 vehicleSquence = 4;
  void clear_vehiclesquence();
  static const int kVehicleSquenceFieldNumber = 4;
  ::google::protobuf::int32 vehiclesquence() const;
  void set_vehiclesquence(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:platoon.communication.VehicleFleetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vehicleid_;
  ::google::protobuf::internal::ArenaStringPtr fmsmessageid_;
  int applyinfo_;
  int actualdrivemode_;
  ::google::protobuf::int32 platoonnumber_;
  ::google::protobuf::int32 vehiclesquence_;
  mutable int _cached_size_;
  friend struct protobuf_DataMessageProto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveUnitOperation

// string id = 1;
inline void DriveUnitOperation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveUnitOperation::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.id)
  return id_.GetNoArena();
}
inline void DriveUnitOperation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.id)
}
#if LANG_CXX11
inline void DriveUnitOperation::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperation.id)
}
#endif
inline void DriveUnitOperation::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperation.id)
}
inline void DriveUnitOperation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperation.id)
}
inline ::std::string* DriveUnitOperation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveUnitOperation::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveUnitOperation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperation.id)
}

// string vehicleId = 2;
inline void DriveUnitOperation::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveUnitOperation::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void DriveUnitOperation::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.vehicleId)
}
#if LANG_CXX11
inline void DriveUnitOperation::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperation.vehicleId)
}
#endif
inline void DriveUnitOperation::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperation.vehicleId)
}
inline void DriveUnitOperation::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperation.vehicleId)
}
inline ::std::string* DriveUnitOperation::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperation.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveUnitOperation::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperation.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveUnitOperation::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperation.vehicleId)
}

// int32 taskId = 3;
inline void DriveUnitOperation::clear_taskid() {
  taskid_ = 0;
}
inline ::google::protobuf::int32 DriveUnitOperation::taskid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.taskId)
  return taskid_;
}
inline void DriveUnitOperation::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.taskId)
}

// int32 actionId = 4;
inline void DriveUnitOperation::clear_actionid() {
  actionid_ = 0;
}
inline ::google::protobuf::int32 DriveUnitOperation::actionid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.actionId)
  return actionid_;
}
inline void DriveUnitOperation::set_actionid(::google::protobuf::int32 value) {
  
  actionid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.actionId)
}

// .platoon.communication.OperationCode operationCode = 5;
inline void DriveUnitOperation::clear_operationcode() {
  operationcode_ = 0;
}
inline ::platoon::communication::OperationCode DriveUnitOperation::operationcode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.operationCode)
  return static_cast< ::platoon::communication::OperationCode >(operationcode_);
}
inline void DriveUnitOperation::set_operationcode(::platoon::communication::OperationCode value) {
  
  operationcode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.operationCode)
}

// .platoon.communication.WorkingMode workingMode = 6;
inline void DriveUnitOperation::clear_workingmode() {
  workingmode_ = 0;
}
inline ::platoon::communication::WorkingMode DriveUnitOperation::workingmode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.workingMode)
  return static_cast< ::platoon::communication::WorkingMode >(workingmode_);
}
inline void DriveUnitOperation::set_workingmode(::platoon::communication::WorkingMode value) {
  
  workingmode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.workingMode)
}

// int32 timeLimit = 7;
inline void DriveUnitOperation::clear_timelimit() {
  timelimit_ = 0;
}
inline ::google::protobuf::int32 DriveUnitOperation::timelimit() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.timeLimit)
  return timelimit_;
}
inline void DriveUnitOperation::set_timelimit(::google::protobuf::int32 value) {
  
  timelimit_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.timeLimit)
}

// float containerWeight = 8;
inline void DriveUnitOperation::clear_containerweight() {
  containerweight_ = 0;
}
inline float DriveUnitOperation::containerweight() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.containerWeight)
  return containerweight_;
}
inline void DriveUnitOperation::set_containerweight(float value) {
  
  containerweight_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.containerWeight)
}

// .platoon.communication.ContainerForm containerForm = 9;
inline void DriveUnitOperation::clear_containerform() {
  containerform_ = 0;
}
inline ::platoon::communication::ContainerForm DriveUnitOperation::containerform() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.containerForm)
  return static_cast< ::platoon::communication::ContainerForm >(containerform_);
}
inline void DriveUnitOperation::set_containerform(::platoon::communication::ContainerForm value) {
  
  containerform_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.containerForm)
}

// .platoon.communication.ContainerType containerType = 10;
inline void DriveUnitOperation::clear_containertype() {
  containertype_ = 0;
}
inline ::platoon::communication::ContainerType DriveUnitOperation::containertype() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.containerType)
  return static_cast< ::platoon::communication::ContainerType >(containertype_);
}
inline void DriveUnitOperation::set_containertype(::platoon::communication::ContainerType value) {
  
  containertype_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.containerType)
}

// .platoon.communication.ContainerLocation containerLocation = 11;
inline void DriveUnitOperation::clear_containerlocation() {
  containerlocation_ = 0;
}
inline ::platoon::communication::ContainerLocation DriveUnitOperation::containerlocation() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.containerLocation)
  return static_cast< ::platoon::communication::ContainerLocation >(containerlocation_);
}
inline void DriveUnitOperation::set_containerlocation(::platoon::communication::ContainerLocation value) {
  
  containerlocation_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.containerLocation)
}

// repeated .platoon.communication.Path nextPath = 12;
inline int DriveUnitOperation::nextpath_size() const {
  return nextpath_.size();
}
inline void DriveUnitOperation::clear_nextpath() {
  nextpath_.Clear();
}
inline const ::platoon::communication::Path& DriveUnitOperation::nextpath(int index) const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.nextPath)
  return nextpath_.Get(index);
}
inline ::platoon::communication::Path* DriveUnitOperation::mutable_nextpath(int index) {
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperation.nextPath)
  return nextpath_.Mutable(index);
}
inline ::platoon::communication::Path* DriveUnitOperation::add_nextpath() {
  // @@protoc_insertion_point(field_add:platoon.communication.DriveUnitOperation.nextPath)
  return nextpath_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::platoon::communication::Path >*
DriveUnitOperation::mutable_nextpath() {
  // @@protoc_insertion_point(field_mutable_list:platoon.communication.DriveUnitOperation.nextPath)
  return &nextpath_;
}
inline const ::google::protobuf::RepeatedPtrField< ::platoon::communication::Path >&
DriveUnitOperation::nextpath() const {
  // @@protoc_insertion_point(field_list:platoon.communication.DriveUnitOperation.nextPath)
  return nextpath_;
}

// int32 inchingDistance = 13;
inline void DriveUnitOperation::clear_inchingdistance() {
  inchingdistance_ = 0;
}
inline ::google::protobuf::int32 DriveUnitOperation::inchingdistance() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.inchingDistance)
  return inchingdistance_;
}
inline void DriveUnitOperation::set_inchingdistance(::google::protobuf::int32 value) {
  
  inchingdistance_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.inchingDistance)
}

// string signature = 14;
inline void DriveUnitOperation::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveUnitOperation::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperation.signature)
  return signature_.GetNoArena();
}
inline void DriveUnitOperation::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperation.signature)
}
#if LANG_CXX11
inline void DriveUnitOperation::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperation.signature)
}
#endif
inline void DriveUnitOperation::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperation.signature)
}
inline void DriveUnitOperation::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperation.signature)
}
inline ::std::string* DriveUnitOperation::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperation.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveUnitOperation::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperation.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveUnitOperation::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperation.signature)
}

// -------------------------------------------------------------------

// Path

// string Id = 1;
inline void Path::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.Id)
  return id_.GetNoArena();
}
inline void Path::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.Path.Id)
}
#if LANG_CXX11
inline void Path::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.Path.Id)
}
#endif
inline void Path::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.Path.Id)
}
inline void Path::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.Path.Id)
}
inline ::std::string* Path::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.Path.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.Path.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.Path.Id)
}

// double posX = 2;
inline void Path::clear_posx() {
  posx_ = 0;
}
inline double Path::posx() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.posX)
  return posx_;
}
inline void Path::set_posx(double value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Path.posX)
}

// double posY = 3;
inline void Path::clear_posy() {
  posy_ = 0;
}
inline double Path::posy() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.posY)
  return posy_;
}
inline void Path::set_posy(double value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Path.posY)
}

// .platoon.communication.PathType pathType = 4;
inline void Path::clear_pathtype() {
  pathtype_ = 0;
}
inline ::platoon::communication::PathType Path::pathtype() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.pathType)
  return static_cast< ::platoon::communication::PathType >(pathtype_);
}
inline void Path::set_pathtype(::platoon::communication::PathType value) {
  
  pathtype_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Path.pathType)
}

// repeated string eliminateLaneId = 5;
inline int Path::eliminatelaneid_size() const {
  return eliminatelaneid_.size();
}
inline void Path::clear_eliminatelaneid() {
  eliminatelaneid_.Clear();
}
inline const ::std::string& Path::eliminatelaneid(int index) const {
  // @@protoc_insertion_point(field_get:platoon.communication.Path.eliminateLaneId)
  return eliminatelaneid_.Get(index);
}
inline ::std::string* Path::mutable_eliminatelaneid(int index) {
  // @@protoc_insertion_point(field_mutable:platoon.communication.Path.eliminateLaneId)
  return eliminatelaneid_.Mutable(index);
}
inline void Path::set_eliminatelaneid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:platoon.communication.Path.eliminateLaneId)
  eliminatelaneid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Path::set_eliminatelaneid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:platoon.communication.Path.eliminateLaneId)
  eliminatelaneid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Path::set_eliminatelaneid(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  eliminatelaneid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:platoon.communication.Path.eliminateLaneId)
}
inline void Path::set_eliminatelaneid(int index, const char* value, size_t size) {
  eliminatelaneid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.Path.eliminateLaneId)
}
inline ::std::string* Path::add_eliminatelaneid() {
  // @@protoc_insertion_point(field_add_mutable:platoon.communication.Path.eliminateLaneId)
  return eliminatelaneid_.Add();
}
inline void Path::add_eliminatelaneid(const ::std::string& value) {
  eliminatelaneid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:platoon.communication.Path.eliminateLaneId)
}
#if LANG_CXX11
inline void Path::add_eliminatelaneid(::std::string&& value) {
  eliminatelaneid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:platoon.communication.Path.eliminateLaneId)
}
#endif
inline void Path::add_eliminatelaneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  eliminatelaneid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:platoon.communication.Path.eliminateLaneId)
}
inline void Path::add_eliminatelaneid(const char* value, size_t size) {
  eliminatelaneid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:platoon.communication.Path.eliminateLaneId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Path::eliminatelaneid() const {
  // @@protoc_insertion_point(field_list:platoon.communication.Path.eliminateLaneId)
  return eliminatelaneid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Path::mutable_eliminatelaneid() {
  // @@protoc_insertion_point(field_mutable_list:platoon.communication.Path.eliminateLaneId)
  return &eliminatelaneid_;
}

// -------------------------------------------------------------------

// DriveUnitOperationResult

// string id = 1;
inline void DriveUnitOperationResult::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveUnitOperationResult::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.id)
  return id_.GetNoArena();
}
inline void DriveUnitOperationResult::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.id)
}
#if LANG_CXX11
inline void DriveUnitOperationResult::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperationResult.id)
}
#endif
inline void DriveUnitOperationResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperationResult.id)
}
inline void DriveUnitOperationResult::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperationResult.id)
}
inline ::std::string* DriveUnitOperationResult::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperationResult.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveUnitOperationResult::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperationResult.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveUnitOperationResult::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperationResult.id)
}

// string vehicleId = 2;
inline void DriveUnitOperationResult::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveUnitOperationResult::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void DriveUnitOperationResult::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.vehicleId)
}
#if LANG_CXX11
inline void DriveUnitOperationResult::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperationResult.vehicleId)
}
#endif
inline void DriveUnitOperationResult::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperationResult.vehicleId)
}
inline void DriveUnitOperationResult::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperationResult.vehicleId)
}
inline ::std::string* DriveUnitOperationResult::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperationResult.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveUnitOperationResult::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperationResult.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveUnitOperationResult::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperationResult.vehicleId)
}

// int32 taskId = 3;
inline void DriveUnitOperationResult::clear_taskid() {
  taskid_ = 0;
}
inline ::google::protobuf::int32 DriveUnitOperationResult::taskid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.taskId)
  return taskid_;
}
inline void DriveUnitOperationResult::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.taskId)
}

// int32 actionId = 4;
inline void DriveUnitOperationResult::clear_actionid() {
  actionid_ = 0;
}
inline ::google::protobuf::int32 DriveUnitOperationResult::actionid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.actionId)
  return actionid_;
}
inline void DriveUnitOperationResult::set_actionid(::google::protobuf::int32 value) {
  
  actionid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.actionId)
}

// .platoon.communication.OperationCode operationCode = 5;
inline void DriveUnitOperationResult::clear_operationcode() {
  operationcode_ = 0;
}
inline ::platoon::communication::OperationCode DriveUnitOperationResult::operationcode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.operationCode)
  return static_cast< ::platoon::communication::OperationCode >(operationcode_);
}
inline void DriveUnitOperationResult::set_operationcode(::platoon::communication::OperationCode value) {
  
  operationcode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.operationCode)
}

// .platoon.communication.DriveUnitOperationResult.TASK_PerfResult result = 6;
inline void DriveUnitOperationResult::clear_result() {
  result_ = 0;
}
inline ::platoon::communication::DriveUnitOperationResult_TASK_PerfResult DriveUnitOperationResult::result() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.result)
  return static_cast< ::platoon::communication::DriveUnitOperationResult_TASK_PerfResult >(result_);
}
inline void DriveUnitOperationResult::set_result(::platoon::communication::DriveUnitOperationResult_TASK_PerfResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.result)
}

// string signature = 7;
inline void DriveUnitOperationResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DriveUnitOperationResult::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DriveUnitOperationResult.signature)
  return signature_.GetNoArena();
}
inline void DriveUnitOperationResult::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DriveUnitOperationResult.signature)
}
#if LANG_CXX11
inline void DriveUnitOperationResult::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DriveUnitOperationResult.signature)
}
#endif
inline void DriveUnitOperationResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DriveUnitOperationResult.signature)
}
inline void DriveUnitOperationResult::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DriveUnitOperationResult.signature)
}
inline ::std::string* DriveUnitOperationResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DriveUnitOperationResult.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DriveUnitOperationResult::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.DriveUnitOperationResult.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DriveUnitOperationResult::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DriveUnitOperationResult.signature)
}

// -------------------------------------------------------------------

// DspFeedbackFrame

// string vehicleId = 1;
inline void DspFeedbackFrame::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DspFeedbackFrame::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void DspFeedbackFrame::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.vehicleId)
}
#if LANG_CXX11
inline void DspFeedbackFrame::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.vehicleId)
}
#endif
inline void DspFeedbackFrame::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.vehicleId)
}
inline void DspFeedbackFrame::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.vehicleId)
}
inline ::std::string* DspFeedbackFrame::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DspFeedbackFrame::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DspFeedbackFrame::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.vehicleId)
}

// int32 taskId = 2;
inline void DspFeedbackFrame::clear_taskid() {
  taskid_ = 0;
}
inline ::google::protobuf::int32 DspFeedbackFrame::taskid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.taskId)
  return taskid_;
}
inline void DspFeedbackFrame::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.taskId)
}

// int32 actionId = 3;
inline void DspFeedbackFrame::clear_actionid() {
  actionid_ = 0;
}
inline ::google::protobuf::int32 DspFeedbackFrame::actionid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.actionId)
  return actionid_;
}
inline void DspFeedbackFrame::set_actionid(::google::protobuf::int32 value) {
  
  actionid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.actionId)
}

// .platoon.communication.VehicleStatus vehicleStatus = 4;
inline void DspFeedbackFrame::clear_vehiclestatus() {
  vehiclestatus_ = 0;
}
inline ::platoon::communication::VehicleStatus DspFeedbackFrame::vehiclestatus() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.vehicleStatus)
  return static_cast< ::platoon::communication::VehicleStatus >(vehiclestatus_);
}
inline void DspFeedbackFrame::set_vehiclestatus(::platoon::communication::VehicleStatus value) {
  
  vehiclestatus_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.vehicleStatus)
}

// float energyLevel = 6;
inline void DspFeedbackFrame::clear_energylevel() {
  energylevel_ = 0;
}
inline float DspFeedbackFrame::energylevel() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.energyLevel)
  return energylevel_;
}
inline void DspFeedbackFrame::set_energylevel(float value) {
  
  energylevel_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.energyLevel)
}

// .platoon.communication.WorkingMode workingMode = 5;
inline void DspFeedbackFrame::clear_workingmode() {
  workingmode_ = 0;
}
inline ::platoon::communication::WorkingMode DspFeedbackFrame::workingmode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.workingMode)
  return static_cast< ::platoon::communication::WorkingMode >(workingmode_);
}
inline void DspFeedbackFrame::set_workingmode(::platoon::communication::WorkingMode value) {
  
  workingmode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.workingMode)
}

// float mileage = 7;
inline void DspFeedbackFrame::clear_mileage() {
  mileage_ = 0;
}
inline float DspFeedbackFrame::mileage() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.mileage)
  return mileage_;
}
inline void DspFeedbackFrame::set_mileage(float value) {
  
  mileage_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.mileage)
}

// string curLaneId = 8;
inline void DspFeedbackFrame::clear_curlaneid() {
  curlaneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DspFeedbackFrame::curlaneid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.curLaneId)
  return curlaneid_.GetNoArena();
}
inline void DspFeedbackFrame::set_curlaneid(const ::std::string& value) {
  
  curlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.curLaneId)
}
#if LANG_CXX11
inline void DspFeedbackFrame::set_curlaneid(::std::string&& value) {
  
  curlaneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.curLaneId)
}
#endif
inline void DspFeedbackFrame::set_curlaneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  curlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.curLaneId)
}
inline void DspFeedbackFrame::set_curlaneid(const char* value, size_t size) {
  
  curlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.curLaneId)
}
inline ::std::string* DspFeedbackFrame::mutable_curlaneid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.curLaneId)
  return curlaneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DspFeedbackFrame::release_curlaneid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.curLaneId)
  
  return curlaneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DspFeedbackFrame::set_allocated_curlaneid(::std::string* curlaneid) {
  if (curlaneid != NULL) {
    
  } else {
    
  }
  curlaneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curlaneid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.curLaneId)
}

// string preLaneId = 9;
inline void DspFeedbackFrame::clear_prelaneid() {
  prelaneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DspFeedbackFrame::prelaneid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.preLaneId)
  return prelaneid_.GetNoArena();
}
inline void DspFeedbackFrame::set_prelaneid(const ::std::string& value) {
  
  prelaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.preLaneId)
}
#if LANG_CXX11
inline void DspFeedbackFrame::set_prelaneid(::std::string&& value) {
  
  prelaneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.preLaneId)
}
#endif
inline void DspFeedbackFrame::set_prelaneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prelaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.preLaneId)
}
inline void DspFeedbackFrame::set_prelaneid(const char* value, size_t size) {
  
  prelaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.preLaneId)
}
inline ::std::string* DspFeedbackFrame::mutable_prelaneid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.preLaneId)
  return prelaneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DspFeedbackFrame::release_prelaneid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.preLaneId)
  
  return prelaneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DspFeedbackFrame::set_allocated_prelaneid(::std::string* prelaneid) {
  if (prelaneid != NULL) {
    
  } else {
    
  }
  prelaneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prelaneid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.preLaneId)
}

// string nextLaneId = 10;
inline void DspFeedbackFrame::clear_nextlaneid() {
  nextlaneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DspFeedbackFrame::nextlaneid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.nextLaneId)
  return nextlaneid_.GetNoArena();
}
inline void DspFeedbackFrame::set_nextlaneid(const ::std::string& value) {
  
  nextlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.nextLaneId)
}
#if LANG_CXX11
inline void DspFeedbackFrame::set_nextlaneid(::std::string&& value) {
  
  nextlaneid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.nextLaneId)
}
#endif
inline void DspFeedbackFrame::set_nextlaneid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nextlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.nextLaneId)
}
inline void DspFeedbackFrame::set_nextlaneid(const char* value, size_t size) {
  
  nextlaneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.nextLaneId)
}
inline ::std::string* DspFeedbackFrame::mutable_nextlaneid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.nextLaneId)
  return nextlaneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DspFeedbackFrame::release_nextlaneid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.nextLaneId)
  
  return nextlaneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DspFeedbackFrame::set_allocated_nextlaneid(::std::string* nextlaneid) {
  if (nextlaneid != NULL) {
    
  } else {
    
  }
  nextlaneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nextlaneid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.nextLaneId)
}

// double longitude = 11;
inline void DspFeedbackFrame::clear_longitude() {
  longitude_ = 0;
}
inline double DspFeedbackFrame::longitude() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.longitude)
  return longitude_;
}
inline void DspFeedbackFrame::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.longitude)
}

// double latitude = 12;
inline void DspFeedbackFrame::clear_latitude() {
  latitude_ = 0;
}
inline double DspFeedbackFrame::latitude() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.latitude)
  return latitude_;
}
inline void DspFeedbackFrame::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.latitude)
}

// int32 errorCode = 13;
inline void DspFeedbackFrame::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 DspFeedbackFrame::errorcode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.errorCode)
  return errorcode_;
}
inline void DspFeedbackFrame::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.errorCode)
}

// float speed = 14;
inline void DspFeedbackFrame::clear_speed() {
  speed_ = 0;
}
inline float DspFeedbackFrame::speed() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.speed)
  return speed_;
}
inline void DspFeedbackFrame::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.speed)
}

// float heading = 15;
inline void DspFeedbackFrame::clear_heading() {
  heading_ = 0;
}
inline float DspFeedbackFrame::heading() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.heading)
  return heading_;
}
inline void DspFeedbackFrame::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.heading)
}

// int32 containerWeight = 16;
inline void DspFeedbackFrame::clear_containerweight() {
  containerweight_ = 0;
}
inline ::google::protobuf::int32 DspFeedbackFrame::containerweight() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.containerWeight)
  return containerweight_;
}
inline void DspFeedbackFrame::set_containerweight(::google::protobuf::int32 value) {
  
  containerweight_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.containerWeight)
}

// bool withContainer = 17;
inline void DspFeedbackFrame::clear_withcontainer() {
  withcontainer_ = false;
}
inline bool DspFeedbackFrame::withcontainer() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.withContainer)
  return withcontainer_;
}
inline void DspFeedbackFrame::set_withcontainer(bool value) {
  
  withcontainer_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.withContainer)
}

// .platoon.communication.ContainerLocation containerLocation = 18;
inline void DspFeedbackFrame::clear_containerlocation() {
  containerlocation_ = 0;
}
inline ::platoon::communication::ContainerLocation DspFeedbackFrame::containerlocation() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.containerLocation)
  return static_cast< ::platoon::communication::ContainerLocation >(containerlocation_);
}
inline void DspFeedbackFrame::set_containerlocation(::platoon::communication::ContainerLocation value) {
  
  containerlocation_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.containerLocation)
}

// .google.protobuf.Timestamp curtime = 19;
inline bool DspFeedbackFrame::has_curtime() const {
  return this != internal_default_instance() && curtime_ != NULL;
}
inline void DspFeedbackFrame::clear_curtime() {
  if (GetArenaNoVirtual() == NULL && curtime_ != NULL) delete curtime_;
  curtime_ = NULL;
}
inline const ::google::protobuf::Timestamp& DspFeedbackFrame::curtime() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.curtime)
  return curtime_ != NULL ? *curtime_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* DspFeedbackFrame::mutable_curtime() {
  
  if (curtime_ == NULL) {
    curtime_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.curtime)
  return curtime_;
}
inline ::google::protobuf::Timestamp* DspFeedbackFrame::release_curtime() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.curtime)
  
  ::google::protobuf::Timestamp* temp = curtime_;
  curtime_ = NULL;
  return temp;
}
inline void DspFeedbackFrame::set_allocated_curtime(::google::protobuf::Timestamp* curtime) {
  delete curtime_;
  if (curtime != NULL && curtime->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_curtime = new ::google::protobuf::Timestamp;
    new_curtime->CopyFrom(*curtime);
    curtime = new_curtime;
  }
  curtime_ = curtime;
  if (curtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.curtime)
}

// string curBayId = 20;
inline void DspFeedbackFrame::clear_curbayid() {
  curbayid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DspFeedbackFrame::curbayid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.curBayId)
  return curbayid_.GetNoArena();
}
inline void DspFeedbackFrame::set_curbayid(const ::std::string& value) {
  
  curbayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.curBayId)
}
#if LANG_CXX11
inline void DspFeedbackFrame::set_curbayid(::std::string&& value) {
  
  curbayid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.curBayId)
}
#endif
inline void DspFeedbackFrame::set_curbayid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  curbayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.curBayId)
}
inline void DspFeedbackFrame::set_curbayid(const char* value, size_t size) {
  
  curbayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.curBayId)
}
inline ::std::string* DspFeedbackFrame::mutable_curbayid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.curBayId)
  return curbayid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DspFeedbackFrame::release_curbayid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.curBayId)
  
  return curbayid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DspFeedbackFrame::set_allocated_curbayid(::std::string* curbayid) {
  if (curbayid != NULL) {
    
  } else {
    
  }
  curbayid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curbayid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.curBayId)
}

// .platoon.communication.Port_Id curPortId = 21;
inline void DspFeedbackFrame::clear_curportid() {
  curportid_ = 0;
}
inline ::platoon::communication::Port_Id DspFeedbackFrame::curportid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.curPortId)
  return static_cast< ::platoon::communication::Port_Id >(curportid_);
}
inline void DspFeedbackFrame::set_curportid(::platoon::communication::Port_Id value) {
  
  curportid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.curPortId)
}

// string fleetId = 22;
inline void DspFeedbackFrame::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DspFeedbackFrame::fleetid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.fleetId)
  return fleetid_.GetNoArena();
}
inline void DspFeedbackFrame::set_fleetid(const ::std::string& value) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.fleetId)
}
#if LANG_CXX11
inline void DspFeedbackFrame::set_fleetid(::std::string&& value) {
  
  fleetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.fleetId)
}
#endif
inline void DspFeedbackFrame::set_fleetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.fleetId)
}
inline void DspFeedbackFrame::set_fleetid(const char* value, size_t size) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.fleetId)
}
inline ::std::string* DspFeedbackFrame::mutable_fleetid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.fleetId)
  return fleetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DspFeedbackFrame::release_fleetid() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.fleetId)
  
  return fleetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DspFeedbackFrame::set_allocated_fleetid(::std::string* fleetid) {
  if (fleetid != NULL) {
    
  } else {
    
  }
  fleetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.fleetId)
}

// string signature = 23;
inline void DspFeedbackFrame::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DspFeedbackFrame::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.signature)
  return signature_.GetNoArena();
}
inline void DspFeedbackFrame::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.signature)
}
#if LANG_CXX11
inline void DspFeedbackFrame::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.DspFeedbackFrame.signature)
}
#endif
inline void DspFeedbackFrame::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.DspFeedbackFrame.signature)
}
inline void DspFeedbackFrame::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.DspFeedbackFrame.signature)
}
inline ::std::string* DspFeedbackFrame::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.DspFeedbackFrame.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DspFeedbackFrame::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.DspFeedbackFrame.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DspFeedbackFrame::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.DspFeedbackFrame.signature)
}

// float subMileage = 24;
inline void DspFeedbackFrame::clear_submileage() {
  submileage_ = 0;
}
inline float DspFeedbackFrame::submileage() const {
  // @@protoc_insertion_point(field_get:platoon.communication.DspFeedbackFrame.subMileage)
  return submileage_;
}
inline void DspFeedbackFrame::set_submileage(float value) {
  
  submileage_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.DspFeedbackFrame.subMileage)
}

// -------------------------------------------------------------------

// RequireLane

// string id = 1;
inline void RequireLane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequireLane::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLane.id)
  return id_.GetNoArena();
}
inline void RequireLane::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLane.id)
}
#if LANG_CXX11
inline void RequireLane::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLane.id)
}
#endif
inline void RequireLane::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLane.id)
}
inline void RequireLane::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLane.id)
}
inline ::std::string* RequireLane::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequireLane::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLane.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequireLane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLane.id)
}

// string linkId = 2;
inline void RequireLane::clear_linkid() {
  linkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequireLane::linkid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLane.linkId)
  return linkid_.GetNoArena();
}
inline void RequireLane::set_linkid(const ::std::string& value) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLane.linkId)
}
#if LANG_CXX11
inline void RequireLane::set_linkid(::std::string&& value) {
  
  linkid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLane.linkId)
}
#endif
inline void RequireLane::set_linkid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLane.linkId)
}
inline void RequireLane::set_linkid(const char* value, size_t size) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLane.linkId)
}
inline ::std::string* RequireLane::mutable_linkid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLane.linkId)
  return linkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequireLane::release_linkid() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLane.linkId)
  
  return linkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequireLane::set_allocated_linkid(::std::string* linkid) {
  if (linkid != NULL) {
    
  } else {
    
  }
  linkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLane.linkId)
}

// string vehicleId = 3;
inline void RequireLane::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequireLane::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLane.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void RequireLane::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLane.vehicleId)
}
#if LANG_CXX11
inline void RequireLane::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLane.vehicleId)
}
#endif
inline void RequireLane::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLane.vehicleId)
}
inline void RequireLane::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLane.vehicleId)
}
inline ::std::string* RequireLane::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLane.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequireLane::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLane.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequireLane::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLane.vehicleId)
}

// string signature = 4;
inline void RequireLane::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequireLane::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLane.signature)
  return signature_.GetNoArena();
}
inline void RequireLane::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLane.signature)
}
#if LANG_CXX11
inline void RequireLane::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLane.signature)
}
#endif
inline void RequireLane::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLane.signature)
}
inline void RequireLane::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLane.signature)
}
inline ::std::string* RequireLane::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLane.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequireLane::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLane.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequireLane::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLane.signature)
}

// -------------------------------------------------------------------

// RequireLaneResult

// string id = 1;
inline void RequireLaneResult::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequireLaneResult::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.id)
  return id_.GetNoArena();
}
inline void RequireLaneResult::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.id)
}
#if LANG_CXX11
inline void RequireLaneResult::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLaneResult.id)
}
#endif
inline void RequireLaneResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLaneResult.id)
}
inline void RequireLaneResult::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLaneResult.id)
}
inline ::std::string* RequireLaneResult::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLaneResult.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequireLaneResult::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLaneResult.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequireLaneResult::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLaneResult.id)
}

// string linkId = 2;
inline void RequireLaneResult::clear_linkid() {
  linkid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequireLaneResult::linkid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.linkId)
  return linkid_.GetNoArena();
}
inline void RequireLaneResult::set_linkid(const ::std::string& value) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.linkId)
}
#if LANG_CXX11
inline void RequireLaneResult::set_linkid(::std::string&& value) {
  
  linkid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLaneResult.linkId)
}
#endif
inline void RequireLaneResult::set_linkid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLaneResult.linkId)
}
inline void RequireLaneResult::set_linkid(const char* value, size_t size) {
  
  linkid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLaneResult.linkId)
}
inline ::std::string* RequireLaneResult::mutable_linkid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLaneResult.linkId)
  return linkid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequireLaneResult::release_linkid() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLaneResult.linkId)
  
  return linkid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequireLaneResult::set_allocated_linkid(::std::string* linkid) {
  if (linkid != NULL) {
    
  } else {
    
  }
  linkid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLaneResult.linkId)
}

// string vehicleId = 3;
inline void RequireLaneResult::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequireLaneResult::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void RequireLaneResult::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.vehicleId)
}
#if LANG_CXX11
inline void RequireLaneResult::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLaneResult.vehicleId)
}
#endif
inline void RequireLaneResult::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLaneResult.vehicleId)
}
inline void RequireLaneResult::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLaneResult.vehicleId)
}
inline ::std::string* RequireLaneResult::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLaneResult.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequireLaneResult::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLaneResult.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequireLaneResult::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLaneResult.vehicleId)
}

// bool result = 4;
inline void RequireLaneResult::clear_result() {
  result_ = false;
}
inline bool RequireLaneResult::result() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.result)
  return result_;
}
inline void RequireLaneResult::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.result)
}

// string signature = 5;
inline void RequireLaneResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequireLaneResult::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.RequireLaneResult.signature)
  return signature_.GetNoArena();
}
inline void RequireLaneResult::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.RequireLaneResult.signature)
}
#if LANG_CXX11
inline void RequireLaneResult::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.RequireLaneResult.signature)
}
#endif
inline void RequireLaneResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.RequireLaneResult.signature)
}
inline void RequireLaneResult::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.RequireLaneResult.signature)
}
inline ::std::string* RequireLaneResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.RequireLaneResult.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequireLaneResult::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.RequireLaneResult.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequireLaneResult::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.RequireLaneResult.signature)
}

// -------------------------------------------------------------------

// VehicleInOutPortMsg

// string id = 1;
inline void VehicleInOutPortMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleInOutPortMsg::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.id)
  return id_.GetNoArena();
}
inline void VehicleInOutPortMsg::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.id)
}
#if LANG_CXX11
inline void VehicleInOutPortMsg::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleInOutPortMsg.id)
}
#endif
inline void VehicleInOutPortMsg::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleInOutPortMsg.id)
}
inline void VehicleInOutPortMsg::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleInOutPortMsg.id)
}
inline ::std::string* VehicleInOutPortMsg::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleInOutPortMsg.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleInOutPortMsg::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleInOutPortMsg.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleInOutPortMsg::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleInOutPortMsg.id)
}

// string vehicleId = 2;
inline void VehicleInOutPortMsg::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleInOutPortMsg::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void VehicleInOutPortMsg::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.vehicleId)
}
#if LANG_CXX11
inline void VehicleInOutPortMsg::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleInOutPortMsg.vehicleId)
}
#endif
inline void VehicleInOutPortMsg::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleInOutPortMsg.vehicleId)
}
inline void VehicleInOutPortMsg::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleInOutPortMsg.vehicleId)
}
inline ::std::string* VehicleInOutPortMsg::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleInOutPortMsg.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleInOutPortMsg::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleInOutPortMsg.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleInOutPortMsg::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleInOutPortMsg.vehicleId)
}

// int32 taskId = 3;
inline void VehicleInOutPortMsg::clear_taskid() {
  taskid_ = 0;
}
inline ::google::protobuf::int32 VehicleInOutPortMsg::taskid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.taskId)
  return taskid_;
}
inline void VehicleInOutPortMsg::set_taskid(::google::protobuf::int32 value) {
  
  taskid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.taskId)
}

// int32 actionId = 4;
inline void VehicleInOutPortMsg::clear_actionid() {
  actionid_ = 0;
}
inline ::google::protobuf::int32 VehicleInOutPortMsg::actionid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.actionId)
  return actionid_;
}
inline void VehicleInOutPortMsg::set_actionid(::google::protobuf::int32 value) {
  
  actionid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.actionId)
}

// .platoon.communication.VehicleInOutPortMsg.AcrossPort_type eventType = 5;
inline void VehicleInOutPortMsg::clear_eventtype() {
  eventtype_ = 0;
}
inline ::platoon::communication::VehicleInOutPortMsg_AcrossPort_type VehicleInOutPortMsg::eventtype() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.eventType)
  return static_cast< ::platoon::communication::VehicleInOutPortMsg_AcrossPort_type >(eventtype_);
}
inline void VehicleInOutPortMsg::set_eventtype(::platoon::communication::VehicleInOutPortMsg_AcrossPort_type value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.eventType)
}

// .platoon.communication.Port_Id portId = 6;
inline void VehicleInOutPortMsg::clear_portid() {
  portid_ = 0;
}
inline ::platoon::communication::Port_Id VehicleInOutPortMsg::portid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.portId)
  return static_cast< ::platoon::communication::Port_Id >(portid_);
}
inline void VehicleInOutPortMsg::set_portid(::platoon::communication::Port_Id value) {
  
  portid_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.portId)
}

// string signature = 7;
inline void VehicleInOutPortMsg::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleInOutPortMsg::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleInOutPortMsg.signature)
  return signature_.GetNoArena();
}
inline void VehicleInOutPortMsg::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleInOutPortMsg.signature)
}
#if LANG_CXX11
inline void VehicleInOutPortMsg::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleInOutPortMsg.signature)
}
#endif
inline void VehicleInOutPortMsg::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleInOutPortMsg.signature)
}
inline void VehicleInOutPortMsg::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleInOutPortMsg.signature)
}
inline ::std::string* VehicleInOutPortMsg::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleInOutPortMsg.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleInOutPortMsg::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleInOutPortMsg.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleInOutPortMsg::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleInOutPortMsg.signature)
}

// -------------------------------------------------------------------

// OperationReceivedMsg

// string id = 1;
inline void OperationReceivedMsg::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperationReceivedMsg::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.OperationReceivedMsg.id)
  return id_.GetNoArena();
}
inline void OperationReceivedMsg::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.OperationReceivedMsg.id)
}
#if LANG_CXX11
inline void OperationReceivedMsg::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.OperationReceivedMsg.id)
}
#endif
inline void OperationReceivedMsg::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.OperationReceivedMsg.id)
}
inline void OperationReceivedMsg::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.OperationReceivedMsg.id)
}
inline ::std::string* OperationReceivedMsg::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.OperationReceivedMsg.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperationReceivedMsg::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.OperationReceivedMsg.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperationReceivedMsg::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.OperationReceivedMsg.id)
}

// string coId = 2;
inline void OperationReceivedMsg::clear_coid() {
  coid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperationReceivedMsg::coid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.OperationReceivedMsg.coId)
  return coid_.GetNoArena();
}
inline void OperationReceivedMsg::set_coid(const ::std::string& value) {
  
  coid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.OperationReceivedMsg.coId)
}
#if LANG_CXX11
inline void OperationReceivedMsg::set_coid(::std::string&& value) {
  
  coid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.OperationReceivedMsg.coId)
}
#endif
inline void OperationReceivedMsg::set_coid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.OperationReceivedMsg.coId)
}
inline void OperationReceivedMsg::set_coid(const char* value, size_t size) {
  
  coid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.OperationReceivedMsg.coId)
}
inline ::std::string* OperationReceivedMsg::mutable_coid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.OperationReceivedMsg.coId)
  return coid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperationReceivedMsg::release_coid() {
  // @@protoc_insertion_point(field_release:platoon.communication.OperationReceivedMsg.coId)
  
  return coid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperationReceivedMsg::set_allocated_coid(::std::string* coid) {
  if (coid != NULL) {
    
  } else {
    
  }
  coid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.OperationReceivedMsg.coId)
}

// -------------------------------------------------------------------

// Fleet_node

// double posX = 1;
inline void Fleet_node::clear_posx() {
  posx_ = 0;
}
inline double Fleet_node::posx() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Fleet_node.posX)
  return posx_;
}
inline void Fleet_node::set_posx(double value) {
  
  posx_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Fleet_node.posX)
}

// double posY = 2;
inline void Fleet_node::clear_posy() {
  posy_ = 0;
}
inline double Fleet_node::posy() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Fleet_node.posY)
  return posy_;
}
inline void Fleet_node::set_posy(double value) {
  
  posy_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Fleet_node.posY)
}

// .platoon.communication.Fleet_node.NodeType nodeType = 3;
inline void Fleet_node::clear_nodetype() {
  nodetype_ = 0;
}
inline ::platoon::communication::Fleet_node_NodeType Fleet_node::nodetype() const {
  // @@protoc_insertion_point(field_get:platoon.communication.Fleet_node.nodeType)
  return static_cast< ::platoon::communication::Fleet_node_NodeType >(nodetype_);
}
inline void Fleet_node::set_nodetype(::platoon::communication::Fleet_node_NodeType value) {
  
  nodetype_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.Fleet_node.nodeType)
}

// -------------------------------------------------------------------

// VehicleFleetOperation

// string id = 1;
inline void VehicleFleetOperation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleFleetOperation::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.id)
  return id_.GetNoArena();
}
inline void VehicleFleetOperation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.id)
}
#if LANG_CXX11
inline void VehicleFleetOperation::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetOperation.id)
}
#endif
inline void VehicleFleetOperation::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetOperation.id)
}
inline void VehicleFleetOperation::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetOperation.id)
}
inline ::std::string* VehicleFleetOperation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleFleetOperation::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleFleetOperation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.id)
}

// string vehicleId = 2;
inline void VehicleFleetOperation::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleFleetOperation::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void VehicleFleetOperation::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.vehicleId)
}
#if LANG_CXX11
inline void VehicleFleetOperation::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetOperation.vehicleId)
}
#endif
inline void VehicleFleetOperation::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetOperation.vehicleId)
}
inline void VehicleFleetOperation::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetOperation.vehicleId)
}
inline ::std::string* VehicleFleetOperation::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleFleetOperation::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleFleetOperation::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.vehicleId)
}

// repeated string platoonMember = 3;
inline int VehicleFleetOperation::platoonmember_size() const {
  return platoonmember_.size();
}
inline void VehicleFleetOperation::clear_platoonmember() {
  platoonmember_.Clear();
}
inline const ::std::string& VehicleFleetOperation::platoonmember(int index) const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.platoonMember)
  return platoonmember_.Get(index);
}
inline ::std::string* VehicleFleetOperation::mutable_platoonmember(int index) {
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.platoonMember)
  return platoonmember_.Mutable(index);
}
inline void VehicleFleetOperation::set_platoonmember(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.platoonMember)
  platoonmember_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VehicleFleetOperation::set_platoonmember(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.platoonMember)
  platoonmember_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VehicleFleetOperation::set_platoonmember(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  platoonmember_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetOperation.platoonMember)
}
inline void VehicleFleetOperation::set_platoonmember(int index, const char* value, size_t size) {
  platoonmember_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetOperation.platoonMember)
}
inline ::std::string* VehicleFleetOperation::add_platoonmember() {
  // @@protoc_insertion_point(field_add_mutable:platoon.communication.VehicleFleetOperation.platoonMember)
  return platoonmember_.Add();
}
inline void VehicleFleetOperation::add_platoonmember(const ::std::string& value) {
  platoonmember_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:platoon.communication.VehicleFleetOperation.platoonMember)
}
#if LANG_CXX11
inline void VehicleFleetOperation::add_platoonmember(::std::string&& value) {
  platoonmember_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:platoon.communication.VehicleFleetOperation.platoonMember)
}
#endif
inline void VehicleFleetOperation::add_platoonmember(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  platoonmember_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:platoon.communication.VehicleFleetOperation.platoonMember)
}
inline void VehicleFleetOperation::add_platoonmember(const char* value, size_t size) {
  platoonmember_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:platoon.communication.VehicleFleetOperation.platoonMember)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VehicleFleetOperation::platoonmember() const {
  // @@protoc_insertion_point(field_list:platoon.communication.VehicleFleetOperation.platoonMember)
  return platoonmember_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VehicleFleetOperation::mutable_platoonmember() {
  // @@protoc_insertion_point(field_mutable_list:platoon.communication.VehicleFleetOperation.platoonMember)
  return &platoonmember_;
}

// int32 platoonNumber = 4;
inline void VehicleFleetOperation::clear_platoonnumber() {
  platoonnumber_ = 0;
}
inline ::google::protobuf::int32 VehicleFleetOperation::platoonnumber() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.platoonNumber)
  return platoonnumber_;
}
inline void VehicleFleetOperation::set_platoonnumber(::google::protobuf::int32 value) {
  
  platoonnumber_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.platoonNumber)
}

// .google.protobuf.Timestamp startTime = 5;
inline bool VehicleFleetOperation::has_starttime() const {
  return this != internal_default_instance() && starttime_ != NULL;
}
inline void VehicleFleetOperation::clear_starttime() {
  if (GetArenaNoVirtual() == NULL && starttime_ != NULL) delete starttime_;
  starttime_ = NULL;
}
inline const ::google::protobuf::Timestamp& VehicleFleetOperation::starttime() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.startTime)
  return starttime_ != NULL ? *starttime_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* VehicleFleetOperation::mutable_starttime() {
  
  if (starttime_ == NULL) {
    starttime_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.startTime)
  return starttime_;
}
inline ::google::protobuf::Timestamp* VehicleFleetOperation::release_starttime() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.startTime)
  
  ::google::protobuf::Timestamp* temp = starttime_;
  starttime_ = NULL;
  return temp;
}
inline void VehicleFleetOperation::set_allocated_starttime(::google::protobuf::Timestamp* starttime) {
  delete starttime_;
  if (starttime != NULL && starttime->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_starttime = new ::google::protobuf::Timestamp;
    new_starttime->CopyFrom(*starttime);
    starttime = new_starttime;
  }
  starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.startTime)
}

// .platoon.communication.Fleet_node startNode = 6;
inline bool VehicleFleetOperation::has_startnode() const {
  return this != internal_default_instance() && startnode_ != NULL;
}
inline void VehicleFleetOperation::clear_startnode() {
  if (GetArenaNoVirtual() == NULL && startnode_ != NULL) delete startnode_;
  startnode_ = NULL;
}
inline const ::platoon::communication::Fleet_node& VehicleFleetOperation::startnode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.startNode)
  return startnode_ != NULL ? *startnode_
                         : *::platoon::communication::Fleet_node::internal_default_instance();
}
inline ::platoon::communication::Fleet_node* VehicleFleetOperation::mutable_startnode() {
  
  if (startnode_ == NULL) {
    startnode_ = new ::platoon::communication::Fleet_node;
  }
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.startNode)
  return startnode_;
}
inline ::platoon::communication::Fleet_node* VehicleFleetOperation::release_startnode() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.startNode)
  
  ::platoon::communication::Fleet_node* temp = startnode_;
  startnode_ = NULL;
  return temp;
}
inline void VehicleFleetOperation::set_allocated_startnode(::platoon::communication::Fleet_node* startnode) {
  delete startnode_;
  startnode_ = startnode;
  if (startnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.startNode)
}

// .platoon.communication.Fleet_node endNode = 7;
inline bool VehicleFleetOperation::has_endnode() const {
  return this != internal_default_instance() && endnode_ != NULL;
}
inline void VehicleFleetOperation::clear_endnode() {
  if (GetArenaNoVirtual() == NULL && endnode_ != NULL) delete endnode_;
  endnode_ = NULL;
}
inline const ::platoon::communication::Fleet_node& VehicleFleetOperation::endnode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.endNode)
  return endnode_ != NULL ? *endnode_
                         : *::platoon::communication::Fleet_node::internal_default_instance();
}
inline ::platoon::communication::Fleet_node* VehicleFleetOperation::mutable_endnode() {
  
  if (endnode_ == NULL) {
    endnode_ = new ::platoon::communication::Fleet_node;
  }
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.endNode)
  return endnode_;
}
inline ::platoon::communication::Fleet_node* VehicleFleetOperation::release_endnode() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.endNode)
  
  ::platoon::communication::Fleet_node* temp = endnode_;
  endnode_ = NULL;
  return temp;
}
inline void VehicleFleetOperation::set_allocated_endnode(::platoon::communication::Fleet_node* endnode) {
  delete endnode_;
  endnode_ = endnode;
  if (endnode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.endNode)
}

// .platoon.communication.Port_Id srcPort = 8;
inline void VehicleFleetOperation::clear_srcport() {
  srcport_ = 0;
}
inline ::platoon::communication::Port_Id VehicleFleetOperation::srcport() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.srcPort)
  return static_cast< ::platoon::communication::Port_Id >(srcport_);
}
inline void VehicleFleetOperation::set_srcport(::platoon::communication::Port_Id value) {
  
  srcport_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.srcPort)
}

// .platoon.communication.Port_Id dstPort = 9;
inline void VehicleFleetOperation::clear_dstport() {
  dstport_ = 0;
}
inline ::platoon::communication::Port_Id VehicleFleetOperation::dstport() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.dstPort)
  return static_cast< ::platoon::communication::Port_Id >(dstport_);
}
inline void VehicleFleetOperation::set_dstport(::platoon::communication::Port_Id value) {
  
  dstport_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.dstPort)
}

// string signature = 10;
inline void VehicleFleetOperation::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleFleetOperation::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.signature)
  return signature_.GetNoArena();
}
inline void VehicleFleetOperation::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.signature)
}
#if LANG_CXX11
inline void VehicleFleetOperation::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetOperation.signature)
}
#endif
inline void VehicleFleetOperation::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetOperation.signature)
}
inline void VehicleFleetOperation::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetOperation.signature)
}
inline ::std::string* VehicleFleetOperation::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetOperation.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleFleetOperation::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetOperation.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleFleetOperation::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetOperation.signature)
}

// double safe_distance = 11;
inline void VehicleFleetOperation::clear_safe_distance() {
  safe_distance_ = 0;
}
inline double VehicleFleetOperation::safe_distance() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetOperation.safe_distance)
  return safe_distance_;
}
inline void VehicleFleetOperation::set_safe_distance(double value) {
  
  safe_distance_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetOperation.safe_distance)
}

// -------------------------------------------------------------------

// VehicleFleetResult

// string id = 1;
inline void VehicleFleetResult::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleFleetResult::id() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.id)
  return id_.GetNoArena();
}
inline void VehicleFleetResult::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.id)
}
#if LANG_CXX11
inline void VehicleFleetResult::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetResult.id)
}
#endif
inline void VehicleFleetResult::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetResult.id)
}
inline void VehicleFleetResult::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetResult.id)
}
inline ::std::string* VehicleFleetResult::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetResult.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleFleetResult::release_id() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetResult.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleFleetResult::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetResult.id)
}

// string vehicleId = 2;
inline void VehicleFleetResult::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleFleetResult::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void VehicleFleetResult::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.vehicleId)
}
#if LANG_CXX11
inline void VehicleFleetResult::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetResult.vehicleId)
}
#endif
inline void VehicleFleetResult::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetResult.vehicleId)
}
inline void VehicleFleetResult::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetResult.vehicleId)
}
inline ::std::string* VehicleFleetResult::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetResult.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleFleetResult::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetResult.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleFleetResult::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetResult.vehicleId)
}

// int32 platoonNumber = 4;
inline void VehicleFleetResult::clear_platoonnumber() {
  platoonnumber_ = 0;
}
inline ::google::protobuf::int32 VehicleFleetResult::platoonnumber() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.platoonNumber)
  return platoonnumber_;
}
inline void VehicleFleetResult::set_platoonnumber(::google::protobuf::int32 value) {
  
  platoonnumber_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.platoonNumber)
}

// .platoon.communication.FleetApplyType applyInfo = 5;
inline void VehicleFleetResult::clear_applyinfo() {
  applyinfo_ = 0;
}
inline ::platoon::communication::FleetApplyType VehicleFleetResult::applyinfo() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.applyInfo)
  return static_cast< ::platoon::communication::FleetApplyType >(applyinfo_);
}
inline void VehicleFleetResult::set_applyinfo(::platoon::communication::FleetApplyType value) {
  
  applyinfo_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.applyInfo)
}

// bool applyResult = 7;
inline void VehicleFleetResult::clear_applyresult() {
  applyresult_ = false;
}
inline bool VehicleFleetResult::applyresult() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.applyResult)
  return applyresult_;
}
inline void VehicleFleetResult::set_applyresult(bool value) {
  
  applyresult_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.applyResult)
}

// string signature = 10;
inline void VehicleFleetResult::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleFleetResult::signature() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetResult.signature)
  return signature_.GetNoArena();
}
inline void VehicleFleetResult::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetResult.signature)
}
#if LANG_CXX11
inline void VehicleFleetResult::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetResult.signature)
}
#endif
inline void VehicleFleetResult::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetResult.signature)
}
inline void VehicleFleetResult::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetResult.signature)
}
inline ::std::string* VehicleFleetResult::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetResult.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleFleetResult::release_signature() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetResult.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleFleetResult::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetResult.signature)
}

// -------------------------------------------------------------------

// VehicleFleetInfo

// .platoon.communication.FleetApplyType applyInfo = 1;
inline void VehicleFleetInfo::clear_applyinfo() {
  applyinfo_ = 0;
}
inline ::platoon::communication::FleetApplyType VehicleFleetInfo::applyinfo() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.applyInfo)
  return static_cast< ::platoon::communication::FleetApplyType >(applyinfo_);
}
inline void VehicleFleetInfo::set_applyinfo(::platoon::communication::FleetApplyType value) {
  
  applyinfo_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.applyInfo)
}

// .platoon.communication.VehicleFleetInfo.VehicleFleetMode actualDriveMode = 2;
inline void VehicleFleetInfo::clear_actualdrivemode() {
  actualdrivemode_ = 0;
}
inline ::platoon::communication::VehicleFleetInfo_VehicleFleetMode VehicleFleetInfo::actualdrivemode() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.actualDriveMode)
  return static_cast< ::platoon::communication::VehicleFleetInfo_VehicleFleetMode >(actualdrivemode_);
}
inline void VehicleFleetInfo::set_actualdrivemode(::platoon::communication::VehicleFleetInfo_VehicleFleetMode value) {
  
  actualdrivemode_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.actualDriveMode)
}

// int32 platoonNumber = 3;
inline void VehicleFleetInfo::clear_platoonnumber() {
  platoonnumber_ = 0;
}
inline ::google::protobuf::int32 VehicleFleetInfo::platoonnumber() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.platoonNumber)
  return platoonnumber_;
}
inline void VehicleFleetInfo::set_platoonnumber(::google::protobuf::int32 value) {
  
  platoonnumber_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.platoonNumber)
}

// int32 vehicleSquence = 4;
inline void VehicleFleetInfo::clear_vehiclesquence() {
  vehiclesquence_ = 0;
}
inline ::google::protobuf::int32 VehicleFleetInfo::vehiclesquence() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.vehicleSquence)
  return vehiclesquence_;
}
inline void VehicleFleetInfo::set_vehiclesquence(::google::protobuf::int32 value) {
  
  vehiclesquence_ = value;
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.vehicleSquence)
}

// string vehicleId = 5;
inline void VehicleFleetInfo::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleFleetInfo::vehicleid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.vehicleId)
  return vehicleid_.GetNoArena();
}
inline void VehicleFleetInfo::set_vehicleid(const ::std::string& value) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.vehicleId)
}
#if LANG_CXX11
inline void VehicleFleetInfo::set_vehicleid(::std::string&& value) {
  
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetInfo.vehicleId)
}
#endif
inline void VehicleFleetInfo::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetInfo.vehicleId)
}
inline void VehicleFleetInfo::set_vehicleid(const char* value, size_t size) {
  
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetInfo.vehicleId)
}
inline ::std::string* VehicleFleetInfo::mutable_vehicleid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetInfo.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleFleetInfo::release_vehicleid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetInfo.vehicleId)
  
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleFleetInfo::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    
  } else {
    
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetInfo.vehicleId)
}

// string fmsMessageId = 6;
inline void VehicleFleetInfo::clear_fmsmessageid() {
  fmsmessageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VehicleFleetInfo::fmsmessageid() const {
  // @@protoc_insertion_point(field_get:platoon.communication.VehicleFleetInfo.fmsMessageId)
  return fmsmessageid_.GetNoArena();
}
inline void VehicleFleetInfo::set_fmsmessageid(const ::std::string& value) {
  
  fmsmessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:platoon.communication.VehicleFleetInfo.fmsMessageId)
}
#if LANG_CXX11
inline void VehicleFleetInfo::set_fmsmessageid(::std::string&& value) {
  
  fmsmessageid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:platoon.communication.VehicleFleetInfo.fmsMessageId)
}
#endif
inline void VehicleFleetInfo::set_fmsmessageid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fmsmessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:platoon.communication.VehicleFleetInfo.fmsMessageId)
}
inline void VehicleFleetInfo::set_fmsmessageid(const char* value, size_t size) {
  
  fmsmessageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:platoon.communication.VehicleFleetInfo.fmsMessageId)
}
inline ::std::string* VehicleFleetInfo::mutable_fmsmessageid() {
  
  // @@protoc_insertion_point(field_mutable:platoon.communication.VehicleFleetInfo.fmsMessageId)
  return fmsmessageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VehicleFleetInfo::release_fmsmessageid() {
  // @@protoc_insertion_point(field_release:platoon.communication.VehicleFleetInfo.fmsMessageId)
  
  return fmsmessageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VehicleFleetInfo::set_allocated_fmsmessageid(::std::string* fmsmessageid) {
  if (fmsmessageid != NULL) {
    
  } else {
    
  }
  fmsmessageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fmsmessageid);
  // @@protoc_insertion_point(field_set_allocated:platoon.communication.VehicleFleetInfo.fmsMessageId)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace communication
}  // namespace platoon

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::platoon::communication::DriveUnitOperationResult_TASK_PerfResult> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::VehicleInOutPortMsg_AcrossPort_type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::Fleet_node_NodeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::VehicleFleetInfo_VehicleFleetMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::FMS_MessageType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::ContainerLocation> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::OperationCode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::WorkingMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::ContainerForm> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::ContainerType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::PathType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::VehicleStatus> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::Port_Id> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::platoon::communication::FleetApplyType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataMessageProto_2eproto__INCLUDED
